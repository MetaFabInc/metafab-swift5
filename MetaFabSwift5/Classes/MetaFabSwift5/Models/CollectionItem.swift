//
// CollectionItem.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CollectionItem: Codable, JSONEncodable, Hashable {

    /** This field has not had a description added. */
    public var id: String?
    /** This field has not had a description added. */
    public var image: String?
    /** This field has not had a description added. */
    public var name: String?
    /** This field has not had a description added. */
    public var description: String?
    /** This field has not had a description added. */
    public var externalUrl: String?
    /** This field has not had a description added. */
    public var attributes: [CollectionItemAttributesInner]?
    /** This field has not had a description added. */
    public var data: AnyCodable?

    public init(id: String? = nil, image: String? = nil, name: String? = nil, description: String? = nil, externalUrl: String? = nil, attributes: [CollectionItemAttributesInner]? = nil, data: AnyCodable? = nil) {
        self.id = id
        self.image = image
        self.name = name
        self.description = description
        self.externalUrl = externalUrl
        self.attributes = attributes
        self.data = data
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case image
        case name
        case description
        case externalUrl
        case attributes
        case data
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(image, forKey: .image)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(externalUrl, forKey: .externalUrl)
        try container.encodeIfPresent(attributes, forKey: .attributes)
        try container.encodeIfPresent(data, forKey: .data)
    }
}

