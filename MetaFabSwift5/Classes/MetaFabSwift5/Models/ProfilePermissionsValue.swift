//
// ProfilePermissionsValue.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Key should be the contract address, value is the permissions object request for the contract. */
public struct ProfilePermissionsValue: Codable, JSONEncodable, Hashable {

    /** The target chain for the contract and related permissions. */
    public var chain: String?
    /** An optional array of valid permissioning scopes. */
    public var scopes: [String]?
    /** An optional array of contract functions to request permission for. */
    public var functions: [String]?
    /** A maximum lifetime limit of erc20 that can be tranferred for this contract address. */
    public var erc20Limit: Int?
    /** An object mapping erc1155 ids to maximum lifetime transfer limits of each permitted item id supplied for this contract address. */
    public var erc1155Limits: [String: Int]?

    public init(chain: String? = nil, scopes: [String]? = nil, functions: [String]? = nil, erc20Limit: Int? = nil, erc1155Limits: [String: Int]? = nil) {
        self.chain = chain
        self.scopes = scopes
        self.functions = functions
        self.erc20Limit = erc20Limit
        self.erc1155Limits = erc1155Limits
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case chain
        case scopes
        case functions
        case erc20Limit
        case erc1155Limits
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(chain, forKey: .chain)
        try container.encodeIfPresent(scopes, forKey: .scopes)
        try container.encodeIfPresent(functions, forKey: .functions)
        try container.encodeIfPresent(erc20Limit, forKey: .erc20Limit)
        try container.encodeIfPresent(erc1155Limits, forKey: .erc1155Limits)
    }
}

