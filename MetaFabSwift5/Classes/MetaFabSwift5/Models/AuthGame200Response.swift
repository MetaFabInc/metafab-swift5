//
// AuthGame200Response.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AuthGame200Response: Codable, JSONEncodable, Hashable {

    /** This field has not had a description added. */
    public var id: String?
    /** This field has not had a description added. */
    public var walletId: String?
    /** This field has not had a description added. */
    public var fundingWalletId: String?
    /** This field has not had a description added. */
    public var email: String?
    /** This field has not had a description added. */
    public var name: String?
    /** This field has not had a description added. */
    public var rpcs: AnyCodable?
    /** This field has not had a description added. */
    public var redirectUris: AnyCodable?
    /** This field has not had a description added. */
    public var iconImageUrl: String?
    /** This field has not had a description added. */
    public var coverImageUrl: String?
    /** This field has not had a description added. */
    public var primaryColorHex: String?
    /** This field has not had a description added. */
    public var publishedKey: String?
    /** This field has not had a description added. */
    public var secretKey: String?
    /** This field has not had a description added. */
    public var verified: Bool?
    /** This field has not had a description added. */
    public var updatedAt: String?
    /** This field has not had a description added. */
    public var createdAt: String?
    public var wallet: WalletModel?
    public var fundingWallet: WalletModel?

    public init(id: String? = nil, walletId: String? = nil, fundingWalletId: String? = nil, email: String? = nil, name: String? = nil, rpcs: AnyCodable? = nil, redirectUris: AnyCodable? = nil, iconImageUrl: String? = nil, coverImageUrl: String? = nil, primaryColorHex: String? = nil, publishedKey: String? = nil, secretKey: String? = nil, verified: Bool? = nil, updatedAt: String? = nil, createdAt: String? = nil, wallet: WalletModel? = nil, fundingWallet: WalletModel? = nil) {
        self.id = id
        self.walletId = walletId
        self.fundingWalletId = fundingWalletId
        self.email = email
        self.name = name
        self.rpcs = rpcs
        self.redirectUris = redirectUris
        self.iconImageUrl = iconImageUrl
        self.coverImageUrl = coverImageUrl
        self.primaryColorHex = primaryColorHex
        self.publishedKey = publishedKey
        self.secretKey = secretKey
        self.verified = verified
        self.updatedAt = updatedAt
        self.createdAt = createdAt
        self.wallet = wallet
        self.fundingWallet = fundingWallet
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case walletId
        case fundingWalletId
        case email
        case name
        case rpcs
        case redirectUris
        case iconImageUrl
        case coverImageUrl
        case primaryColorHex
        case publishedKey
        case secretKey
        case verified
        case updatedAt
        case createdAt
        case wallet
        case fundingWallet
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(walletId, forKey: .walletId)
        try container.encodeIfPresent(fundingWalletId, forKey: .fundingWalletId)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(rpcs, forKey: .rpcs)
        try container.encodeIfPresent(redirectUris, forKey: .redirectUris)
        try container.encodeIfPresent(iconImageUrl, forKey: .iconImageUrl)
        try container.encodeIfPresent(coverImageUrl, forKey: .coverImageUrl)
        try container.encodeIfPresent(primaryColorHex, forKey: .primaryColorHex)
        try container.encodeIfPresent(publishedKey, forKey: .publishedKey)
        try container.encodeIfPresent(secretKey, forKey: .secretKey)
        try container.encodeIfPresent(verified, forKey: .verified)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(wallet, forKey: .wallet)
        try container.encodeIfPresent(fundingWallet, forKey: .fundingWallet)
    }
}

