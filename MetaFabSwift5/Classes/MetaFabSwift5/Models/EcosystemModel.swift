//
// EcosystemModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct EcosystemModel: Codable, JSONEncodable, Hashable {

    /** This field has not had a description added. */
    public var id: String?
    /** This field has not had a description added. */
    public var email: String?
    /** This field has not had a description added. */
    public var name: String?
    /** This field has not had a description added. */
    public var iconImageUrl: String?
    /** This field has not had a description added. */
    public var coverImageUrl: String?
    /** This field has not had a description added. */
    public var primaryColorHex: String?
    /** This field has not had a description added. */
    public var publishedKey: String?
    /** This field has not had a description added. */
    public var secretKey: String?
    /** This field has not had a description added. */
    public var updatedAt: String?
    /** This field has not had a description added. */
    public var createdAt: String?

    public init(id: String? = nil, email: String? = nil, name: String? = nil, iconImageUrl: String? = nil, coverImageUrl: String? = nil, primaryColorHex: String? = nil, publishedKey: String? = nil, secretKey: String? = nil, updatedAt: String? = nil, createdAt: String? = nil) {
        self.id = id
        self.email = email
        self.name = name
        self.iconImageUrl = iconImageUrl
        self.coverImageUrl = coverImageUrl
        self.primaryColorHex = primaryColorHex
        self.publishedKey = publishedKey
        self.secretKey = secretKey
        self.updatedAt = updatedAt
        self.createdAt = createdAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case email
        case name
        case iconImageUrl
        case coverImageUrl
        case primaryColorHex
        case publishedKey
        case secretKey
        case updatedAt
        case createdAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(iconImageUrl, forKey: .iconImageUrl)
        try container.encodeIfPresent(coverImageUrl, forKey: .coverImageUrl)
        try container.encodeIfPresent(primaryColorHex, forKey: .primaryColorHex)
        try container.encodeIfPresent(publishedKey, forKey: .publishedKey)
        try container.encodeIfPresent(secretKey, forKey: .secretKey)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
    }
}

