//
// UpdateGameRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UpdateGameRequest: Codable, JSONEncodable, Hashable {

    /** A new name. Replaces the game's current name. */
    public var name: String?
    /** A new email address. The game's old email will no longer be valid for account authentication. `currentPassword` must also be provided. */
    public var email: String?
    /** The game's current password. Must be provided if setting `newPassword` or `email`. */
    public var currentPassword: String?
    /** A new password. The game's old password will no longer be valid. */
    public var newPassword: String?
    /** Sets a custom RPC for your game to use instead of MetaFab's default RPCs for the chain(s) you specify.  Expects a JSON object containing key value pairs of supported `chain` -> `rpc url`. Only the chain names provided as keys in the object will be explicitly overriden. To delete a custom RPC for your game, provide the chain name to delete as a key in the provided object and `null` as the value.  Set RPC example, `{ MATIC: 'https://polygon-rpc.com' }` Delete RPC example, `{ MATIC: null }` */
    public var rpcs: [String: String]?
    /** Revokes the game's previous published key and returns a new one if true. */
    public var resetPublishedKey: Bool?
    /** Revokes the game's previous secret key and returns a new on if true. */
    public var resetSecretKey: Bool?

    public init(name: String? = nil, email: String? = nil, currentPassword: String? = nil, newPassword: String? = nil, rpcs: [String: String]? = nil, resetPublishedKey: Bool? = nil, resetSecretKey: Bool? = nil) {
        self.name = name
        self.email = email
        self.currentPassword = currentPassword
        self.newPassword = newPassword
        self.rpcs = rpcs
        self.resetPublishedKey = resetPublishedKey
        self.resetSecretKey = resetSecretKey
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case email
        case currentPassword
        case newPassword
        case rpcs
        case resetPublishedKey
        case resetSecretKey
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(currentPassword, forKey: .currentPassword)
        try container.encodeIfPresent(newPassword, forKey: .newPassword)
        try container.encodeIfPresent(rpcs, forKey: .rpcs)
        try container.encodeIfPresent(resetPublishedKey, forKey: .resetPublishedKey)
        try container.encodeIfPresent(resetSecretKey, forKey: .resetSecretKey)
    }
}

