//
// SetShopOfferRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SetShopOfferRequest: Codable, JSONEncodable, Hashable {

    /** A unique offer id to use for this offer for the shop. If an existing offer id is used, the current offer will be updated but the existing number of uses will be kept. If you want to reset the number of uses for an existing offer, first remove it using the remove offer endpoint, then set it. */
    public var id: Int
    /** A valid EVM based ERC1155 or MetaFab game items contract address that represents the collection for input items required by this offer. `inputCollectionAddress` or `inputCollectionId` can optionally be provided. */
    public var inputCollectionAddress: String?
    /** A valid MetaFab collection id that represents the collection for input items required by this offer. `inputCollectionAddress` or `inputCollectionId` can optionally be provided. */
    public var inputCollectionId: String?
    /** An array of item ids from the provided input collection that are required to use this offer. Input items are transferred from the wallet to the shop contract upon using an offer. */
    public var inputCollectionItemIds: [Int]?
    /** An array of amounts for each item id from the provided input collection that are required to use this offer. Item amounts array indices are reflective of the amount required for a given item id at the same index. */
    public var inputCollectionItemAmounts: [Int]?
    /** A valid EVM based ERC20 or MetaFab game currency contract address that for the currency required by this offer. */
    public var inputCurrencyAddress: String?
    /** A valid MetaFab currency id that represents the currency required by this offer. */
    public var inputCurrencyId: String?
    /** The amount of currency required by this offer. If an inputCurrencyAmount is provided without in input currency address or id, the native chain currency is used as the required currency. */
    public var inputCurrencyAmount: Double?
    /** A valid EVM based ERC1155 or MetaFab game items contract address that represents the collection for output items given by this offer. `outputCollectionAddress` or `outputCollectionId` can optionally be provided. */
    public var outputCollectionAddress: String?
    /** A valid MetaFab collection id that represents the collection for output items given by this offer. `outputCollectionAddress` or `outputCollectionId` can optionally be provided. */
    public var outputCollectionId: String?
    /** An array of item ids from the provided output collection that are given by this offer. Output items are automatically minted if the shop contract has the `minter` role for the output collection contract. Otherwise, they are transferred from the item balance held by the shop contract. */
    public var outputCollectionItemIds: [Int]?
    /** An array of amounts for each item id from the provided output collection that are given by this offer. Item amounts array indices are reflective of the amount required for a given item id at the same index. */
    public var outputCollectionItemAmounts: [Int]?
    /** A valid EVM based ERC20 or MetaFab game currency contract address that for the currency given by this offer. The output currency amount is automatically minted if the shop contract has the `minter` role for the output currency contract. Otherwise, they are transferred from the currency balance held by the shop contract. */
    public var outputCurrencyAddress: String?
    /** A valid MetaFab currency id for the currency given by this offer. */
    public var outputCurrencyId: String?
    /** The amount of currency given by this offer. If an outputCurrencyAmount is provided without an output currency address or id, the native chain currency is used as the given currency. */
    public var outputCurrencyAmount: Double?
    /** The maximum number of times this offer can be used in total. maxUses is collective across all uses of the offer. If 5 unique players use an offer, that counts as 5 offer uses. Exclude this or use 0 to allow unlimited uses. */
    public var maxUses: Int?

    public init(id: Int, inputCollectionAddress: String? = nil, inputCollectionId: String? = nil, inputCollectionItemIds: [Int]? = nil, inputCollectionItemAmounts: [Int]? = nil, inputCurrencyAddress: String? = nil, inputCurrencyId: String? = nil, inputCurrencyAmount: Double? = nil, outputCollectionAddress: String? = nil, outputCollectionId: String? = nil, outputCollectionItemIds: [Int]? = nil, outputCollectionItemAmounts: [Int]? = nil, outputCurrencyAddress: String? = nil, outputCurrencyId: String? = nil, outputCurrencyAmount: Double? = nil, maxUses: Int? = nil) {
        self.id = id
        self.inputCollectionAddress = inputCollectionAddress
        self.inputCollectionId = inputCollectionId
        self.inputCollectionItemIds = inputCollectionItemIds
        self.inputCollectionItemAmounts = inputCollectionItemAmounts
        self.inputCurrencyAddress = inputCurrencyAddress
        self.inputCurrencyId = inputCurrencyId
        self.inputCurrencyAmount = inputCurrencyAmount
        self.outputCollectionAddress = outputCollectionAddress
        self.outputCollectionId = outputCollectionId
        self.outputCollectionItemIds = outputCollectionItemIds
        self.outputCollectionItemAmounts = outputCollectionItemAmounts
        self.outputCurrencyAddress = outputCurrencyAddress
        self.outputCurrencyId = outputCurrencyId
        self.outputCurrencyAmount = outputCurrencyAmount
        self.maxUses = maxUses
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case inputCollectionAddress
        case inputCollectionId
        case inputCollectionItemIds
        case inputCollectionItemAmounts
        case inputCurrencyAddress
        case inputCurrencyId
        case inputCurrencyAmount
        case outputCollectionAddress
        case outputCollectionId
        case outputCollectionItemIds
        case outputCollectionItemAmounts
        case outputCurrencyAddress
        case outputCurrencyId
        case outputCurrencyAmount
        case maxUses
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(inputCollectionAddress, forKey: .inputCollectionAddress)
        try container.encodeIfPresent(inputCollectionId, forKey: .inputCollectionId)
        try container.encodeIfPresent(inputCollectionItemIds, forKey: .inputCollectionItemIds)
        try container.encodeIfPresent(inputCollectionItemAmounts, forKey: .inputCollectionItemAmounts)
        try container.encodeIfPresent(inputCurrencyAddress, forKey: .inputCurrencyAddress)
        try container.encodeIfPresent(inputCurrencyId, forKey: .inputCurrencyId)
        try container.encodeIfPresent(inputCurrencyAmount, forKey: .inputCurrencyAmount)
        try container.encodeIfPresent(outputCollectionAddress, forKey: .outputCollectionAddress)
        try container.encodeIfPresent(outputCollectionId, forKey: .outputCollectionId)
        try container.encodeIfPresent(outputCollectionItemIds, forKey: .outputCollectionItemIds)
        try container.encodeIfPresent(outputCollectionItemAmounts, forKey: .outputCollectionItemAmounts)
        try container.encodeIfPresent(outputCurrencyAddress, forKey: .outputCurrencyAddress)
        try container.encodeIfPresent(outputCurrencyId, forKey: .outputCurrencyId)
        try container.encodeIfPresent(outputCurrencyAmount, forKey: .outputCurrencyAmount)
        try container.encodeIfPresent(maxUses, forKey: .maxUses)
    }
}

