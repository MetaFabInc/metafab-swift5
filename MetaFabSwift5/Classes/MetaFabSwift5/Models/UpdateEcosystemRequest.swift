//
// UpdateEcosystemRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UpdateEcosystemRequest: Codable, JSONEncodable, Hashable {

    /** A new name. Replaces the ecosystem's current name. */
    public var name: String?
    /** A new email address. The ecosystem's old email will no longer be valid for account authentication. `currentPassword` must also be provided. */
    public var email: String?
    /** The ecosystem's current password. Must be provided if setting `newPassword` or `email`. */
    public var currentPassword: String?
    /** A new password. The ecosystem's old password will no longer be valid. */
    public var newPassword: String?
    /** A base64 string of the icon image for this ecosystem. Supported image formats are `jpg`, `jpeg`, `png`, `gif` Recommended size is 512x512 pixels, or 1:1 aspect ratio. This image is used for your profile authorization flow and other MetaFab features for your ecosystem. */
    public var iconImageBase64: String?
    /** A base64 string of the cover image for this ecosystem. Supported image formats are `jpg`, `jpeg`, `png`, `gif`. Recommended size is 1600x1000 pixels, or 16:10 aspect ratio.  This image is used as the background image for your profile authorization flow and other MetaFab features for your ecosystem. */
    public var coverImageBase64: String?
    /** A valid hex color code. This color is used for your profile authorization flow to control the color of buttons and other brandable MetaFab features for your ecosystem. */
    public var primaryColorHex: String?
    /** Revokes the ecosystem's previous published key and returns a new one if true. */
    public var resetPublishedKey: Bool?
    /** Revokes the ecosystem's previous secret key and returns a new on if true. */
    public var resetSecretKey: Bool?

    public init(name: String? = nil, email: String? = nil, currentPassword: String? = nil, newPassword: String? = nil, iconImageBase64: String? = nil, coverImageBase64: String? = nil, primaryColorHex: String? = nil, resetPublishedKey: Bool? = nil, resetSecretKey: Bool? = nil) {
        self.name = name
        self.email = email
        self.currentPassword = currentPassword
        self.newPassword = newPassword
        self.iconImageBase64 = iconImageBase64
        self.coverImageBase64 = coverImageBase64
        self.primaryColorHex = primaryColorHex
        self.resetPublishedKey = resetPublishedKey
        self.resetSecretKey = resetSecretKey
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case email
        case currentPassword
        case newPassword
        case iconImageBase64
        case coverImageBase64
        case primaryColorHex
        case resetPublishedKey
        case resetSecretKey
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(currentPassword, forKey: .currentPassword)
        try container.encodeIfPresent(newPassword, forKey: .newPassword)
        try container.encodeIfPresent(iconImageBase64, forKey: .iconImageBase64)
        try container.encodeIfPresent(coverImageBase64, forKey: .coverImageBase64)
        try container.encodeIfPresent(primaryColorHex, forKey: .primaryColorHex)
        try container.encodeIfPresent(resetPublishedKey, forKey: .resetPublishedKey)
        try container.encodeIfPresent(resetSecretKey, forKey: .resetSecretKey)
    }
}

