//
// ItemsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ItemsAPI {

    /**
     Batch mint collection items
     
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter batchMintCollectionItemsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func batchMintCollectionItems(collectionId: String, xAuthorization: String, xPassword: String, batchMintCollectionItemsRequest: BatchMintCollectionItemsRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: TransactionModel?, _ error: Error?) -> Void)) -> RequestTask {
        return batchMintCollectionItemsWithRequestBuilder(collectionId: collectionId, xAuthorization: xAuthorization, xPassword: xPassword, batchMintCollectionItemsRequest: batchMintCollectionItemsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Batch mint collection items
     - POST /v1/collections/{collectionId}/batchMints
     - Creates (mints) the provided itemIds of the specified quantities to the provided wallet address or wallet address associated with the provided walletId.
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter batchMintCollectionItemsRequest: (body)  
     - returns: RequestBuilder<TransactionModel> 
     */
    open class func batchMintCollectionItemsWithRequestBuilder(collectionId: String, xAuthorization: String, xPassword: String, batchMintCollectionItemsRequest: BatchMintCollectionItemsRequest) -> RequestBuilder<TransactionModel> {
        var localVariablePath = "/v1/collections/{collectionId}/batchMints"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: batchMintCollectionItemsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Password": xPassword.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionModel>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Batch transfer collection items
     
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. 
     - parameter xPassword: (header) The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. 
     - parameter batchTransferCollectionItemsRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func batchTransferCollectionItems(collectionId: String, xAuthorization: String, xPassword: String, batchTransferCollectionItemsRequest: BatchTransferCollectionItemsRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: TransactionModel?, _ error: Error?) -> Void)) -> RequestTask {
        return batchTransferCollectionItemsWithRequestBuilder(collectionId: collectionId, xAuthorization: xAuthorization, xPassword: xPassword, batchTransferCollectionItemsRequest: batchTransferCollectionItemsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Batch transfer collection items
     - POST /v1/collections/{collectionId}/batchTransfers
     - Transfers one or multiple items of specified quantities to the provided wallet addresses or wallet addresses associated with the provided walletIds. You may also provide a combination of addresses and walletIds in one request.
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. 
     - parameter xPassword: (header) The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. 
     - parameter batchTransferCollectionItemsRequest: (body)  
     - returns: RequestBuilder<TransactionModel> 
     */
    open class func batchTransferCollectionItemsWithRequestBuilder(collectionId: String, xAuthorization: String, xPassword: String, batchTransferCollectionItemsRequest: BatchTransferCollectionItemsRequest) -> RequestBuilder<TransactionModel> {
        var localVariablePath = "/v1/collections/{collectionId}/batchTransfers"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: batchTransferCollectionItemsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Password": xPassword.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionModel>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Burn collection item
     
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter collectionItemId: (path) Any item id for the collection. Zero, or a positive integer. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. 
     - parameter xPassword: (header) The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. 
     - parameter burnCollectionItemRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func burnCollectionItem(collectionId: String, collectionItemId: Double, xAuthorization: String, xPassword: String, burnCollectionItemRequest: BurnCollectionItemRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: TransactionModel?, _ error: Error?) -> Void)) -> RequestTask {
        return burnCollectionItemWithRequestBuilder(collectionId: collectionId, collectionItemId: collectionItemId, xAuthorization: xAuthorization, xPassword: xPassword, burnCollectionItemRequest: burnCollectionItemRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Burn collection item
     - POST /v1/collections/{collectionId}/items/{collectionItemId}/burns
     - Removes (burns) the provided quantity of the collectionItemId from the authenticating game or players wallet. The quantity is permanently removed from the circulating supply of the item.
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter collectionItemId: (path) Any item id for the collection. Zero, or a positive integer. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. 
     - parameter xPassword: (header) The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. 
     - parameter burnCollectionItemRequest: (body)  
     - returns: RequestBuilder<TransactionModel> 
     */
    open class func burnCollectionItemWithRequestBuilder(collectionId: String, collectionItemId: Double, xAuthorization: String, xPassword: String, burnCollectionItemRequest: BurnCollectionItemRequest) -> RequestBuilder<TransactionModel> {
        var localVariablePath = "/v1/collections/{collectionId}/items/{collectionItemId}/burns"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let collectionItemIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionItemId))"
        let collectionItemIdPostEscape = collectionItemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionItemId}", with: collectionItemIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: burnCollectionItemRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Password": xPassword.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionModel>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Create collection
     
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter createCollectionRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createCollection(xAuthorization: String, xPassword: String, createCollectionRequest: CreateCollectionRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: CreateCollection200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return createCollectionWithRequestBuilder(xAuthorization: xAuthorization, xPassword: xPassword, createCollectionRequest: createCollectionRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create collection
     - POST /v1/collections
     - Creates a new game item collection and deploys an extended functionality ERC1155 contract on behalf of the authenticating game's primary wallet. The deployed ERC1155 contract is preconfigured to fully support creating unique item types, item transfer timelocks, custom metadata per item, gasless transactions from player managed wallets, and much more.
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter createCollectionRequest: (body)  
     - returns: RequestBuilder<CreateCollection200Response> 
     */
    open class func createCollectionWithRequestBuilder(xAuthorization: String, xPassword: String, createCollectionRequest: CreateCollectionRequest) -> RequestBuilder<CreateCollection200Response> {
        let localVariablePath = "/v1/collections"
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createCollectionRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Password": xPassword.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateCollection200Response>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Create collection item
     
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter createCollectionItemRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createCollectionItem(collectionId: String, xAuthorization: String, xPassword: String, createCollectionItemRequest: CreateCollectionItemRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: TransactionModel?, _ error: Error?) -> Void)) -> RequestTask {
        return createCollectionItemWithRequestBuilder(collectionId: collectionId, xAuthorization: xAuthorization, xPassword: xPassword, createCollectionItemRequest: createCollectionItemRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create collection item
     - POST /v1/collections/{collectionId}/items
     - Creates a new item type. Item type creation associates all of the relevant item data to a specific itemId. Such as item name, image, description, attributes, any arbitrary data such as 2D or 3D model resolver URLs, and more. It is recommended, but not required, that you create a new item type through this endpoint before minting any quantity of the related itemId.  Any itemId provided will have its existing item type overriden if it already exists.  Item type data is uploaded to, and resolved through IPFS for decentralized persistence.
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter createCollectionItemRequest: (body)  
     - returns: RequestBuilder<TransactionModel> 
     */
    open class func createCollectionItemWithRequestBuilder(collectionId: String, xAuthorization: String, xPassword: String, createCollectionItemRequest: CreateCollectionItemRequest) -> RequestBuilder<TransactionModel> {
        var localVariablePath = "/v1/collections/{collectionId}/items"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createCollectionItemRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Password": xPassword.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionModel>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get collection approval
     
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter operatorAddress: (query) A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. 
     - parameter address: (query) A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     - parameter walletId: (query) Any wallet id within the MetaFab ecosystem. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCollectionApproval(collectionId: String, operatorAddress: String, address: String? = nil, walletId: String? = nil, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: Bool?, _ error: Error?) -> Void)) -> RequestTask {
        return getCollectionApprovalWithRequestBuilder(collectionId: collectionId, operatorAddress: operatorAddress, address: address, walletId: walletId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get collection approval
     - GET /v1/collections/{collectionId}/approvals
     - Returns a boolean (true/false) representing if the provided operatorAddress has approval to transfer and burn items from the current collection owned by the address or address associated with the provided walletId.
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter operatorAddress: (query) A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. 
     - parameter address: (query) A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     - parameter walletId: (query) Any wallet id within the MetaFab ecosystem. (optional)
     - returns: RequestBuilder<Bool> 
     */
    open class func getCollectionApprovalWithRequestBuilder(collectionId: String, operatorAddress: String, address: String? = nil, walletId: String? = nil) -> RequestBuilder<Bool> {
        var localVariablePath = "/v1/collections/{collectionId}/approvals"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "operatorAddress": (wrappedValue: operatorAddress.encodeToJSON(), isExplode: true),
            "address": (wrappedValue: address?.encodeToJSON(), isExplode: true),
            "walletId": (wrappedValue: walletId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Bool>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get collection item
     
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter collectionItemId: (path) Any item id for the collection. Zero, or a positive integer. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCollectionItem(collectionId: String, collectionItemId: Double, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return getCollectionItemWithRequestBuilder(collectionId: collectionId, collectionItemId: collectionItemId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get collection item
     - GET /v1/collections/{collectionId}/items/{collectionItemId}
     - Returns a metadata object for the provided collectionItemId.
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter collectionItemId: (path) Any item id for the collection. Zero, or a positive integer. 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func getCollectionItemWithRequestBuilder(collectionId: String, collectionItemId: Double) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/v1/collections/{collectionId}/items/{collectionItemId}"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let collectionItemIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionItemId))"
        let collectionItemIdPostEscape = collectionItemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionItemId}", with: collectionItemIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get collection item balance
     
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter collectionItemId: (path) Any item id for the collection. Zero, or a positive integer. 
     - parameter address: (query) A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     - parameter walletId: (query) Any wallet id within the MetaFab ecosystem. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCollectionItemBalance(collectionId: String, collectionItemId: Double, address: String? = nil, walletId: String? = nil, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: Double?, _ error: Error?) -> Void)) -> RequestTask {
        return getCollectionItemBalanceWithRequestBuilder(collectionId: collectionId, collectionItemId: collectionItemId, address: address, walletId: walletId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get collection item balance
     - GET /v1/collections/{collectionId}/items/{collectionItemId}/balances
     - Returns the current collection item balance of the provided collectionItemId for the provided wallet address or the wallet address associated with the provided walletId.
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter collectionItemId: (path) Any item id for the collection. Zero, or a positive integer. 
     - parameter address: (query) A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     - parameter walletId: (query) Any wallet id within the MetaFab ecosystem. (optional)
     - returns: RequestBuilder<Double> 
     */
    open class func getCollectionItemBalanceWithRequestBuilder(collectionId: String, collectionItemId: Double, address: String? = nil, walletId: String? = nil) -> RequestBuilder<Double> {
        var localVariablePath = "/v1/collections/{collectionId}/items/{collectionItemId}/balances"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let collectionItemIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionItemId))"
        let collectionItemIdPostEscape = collectionItemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionItemId}", with: collectionItemIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "address": (wrappedValue: address?.encodeToJSON(), isExplode: true),
            "walletId": (wrappedValue: walletId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Double>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get collection item balances
     
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter address: (query) A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     - parameter walletId: (query) Any wallet id within the MetaFab ecosystem. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCollectionItemBalances(collectionId: String, address: String? = nil, walletId: String? = nil, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: [String: Double]?, _ error: Error?) -> Void)) -> RequestTask {
        return getCollectionItemBalancesWithRequestBuilder(collectionId: collectionId, address: address, walletId: walletId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get collection item balances
     - GET /v1/collections/{collectionId}/balances
     - Returns the current collection item balances of all collection items for the provided wallet address or the wallet address associated with the provided walletId.
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter address: (query) A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     - parameter walletId: (query) Any wallet id within the MetaFab ecosystem. (optional)
     - returns: RequestBuilder<[String: Double]> 
     */
    open class func getCollectionItemBalancesWithRequestBuilder(collectionId: String, address: String? = nil, walletId: String? = nil) -> RequestBuilder<[String: Double]> {
        var localVariablePath = "/v1/collections/{collectionId}/balances"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "address": (wrappedValue: address?.encodeToJSON(), isExplode: true),
            "walletId": (wrappedValue: walletId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String: Double]>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get collection item supplies
     
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCollectionItemSupplies(collectionId: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: [String: Double]?, _ error: Error?) -> Void)) -> RequestTask {
        return getCollectionItemSuppliesWithRequestBuilder(collectionId: collectionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get collection item supplies
     - GET /v1/collections/{collectionId}/supplies
     - Returns the currency circulating supply of all collection items.
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - returns: RequestBuilder<[String: Double]> 
     */
    open class func getCollectionItemSuppliesWithRequestBuilder(collectionId: String) -> RequestBuilder<[String: Double]> {
        var localVariablePath = "/v1/collections/{collectionId}/supplies"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String: Double]>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get collection item supply
     
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter collectionItemId: (path) Any item id for the collection. Zero, or a positive integer. 
     - parameter address: (query) A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     - parameter walletId: (query) Any wallet id within the MetaFab ecosystem. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCollectionItemSupply(collectionId: String, collectionItemId: Double, address: String? = nil, walletId: String? = nil, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: Double?, _ error: Error?) -> Void)) -> RequestTask {
        return getCollectionItemSupplyWithRequestBuilder(collectionId: collectionId, collectionItemId: collectionItemId, address: address, walletId: walletId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get collection item supply
     - GET /v1/collections/{collectionId}/items/{collectionItemId}/supplies
     - Returns the current circulating supply of the provided collectionItemId.
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter collectionItemId: (path) Any item id for the collection. Zero, or a positive integer. 
     - parameter address: (query) A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     - parameter walletId: (query) Any wallet id within the MetaFab ecosystem. (optional)
     - returns: RequestBuilder<Double> 
     */
    open class func getCollectionItemSupplyWithRequestBuilder(collectionId: String, collectionItemId: Double, address: String? = nil, walletId: String? = nil) -> RequestBuilder<Double> {
        var localVariablePath = "/v1/collections/{collectionId}/items/{collectionItemId}/supplies"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let collectionItemIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionItemId))"
        let collectionItemIdPostEscape = collectionItemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionItemId}", with: collectionItemIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "address": (wrappedValue: address?.encodeToJSON(), isExplode: true),
            "walletId": (wrappedValue: walletId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Double>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get collection item timelock
     
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter collectionItemId: (path) Any item id for the collection. Zero, or a positive integer. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCollectionItemTimelock(collectionId: String, collectionItemId: Double, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: Double?, _ error: Error?) -> Void)) -> RequestTask {
        return getCollectionItemTimelockWithRequestBuilder(collectionId: collectionId, collectionItemId: collectionItemId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get collection item timelock
     - GET /v1/collections/{collectionId}/items/{collectionItemId}/timelocks
     - Returns a timestamp (in seconds) for when the provided collectionItemId's transfer timelock expires. A value of 0 means the provided collectionItemId does not have a timelock set. Timelocks prevent items of a specific collectionItemId from being transferred until the set timelock timestamp has been surpassed.
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter collectionItemId: (path) Any item id for the collection. Zero, or a positive integer. 
     - returns: RequestBuilder<Double> 
     */
    open class func getCollectionItemTimelockWithRequestBuilder(collectionId: String, collectionItemId: Double) -> RequestBuilder<Double> {
        var localVariablePath = "/v1/collections/{collectionId}/items/{collectionItemId}/timelocks"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let collectionItemIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionItemId))"
        let collectionItemIdPostEscape = collectionItemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionItemId}", with: collectionItemIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Double>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get collection items
     
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCollectionItems(collectionId: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: [AnyCodable]?, _ error: Error?) -> Void)) -> RequestTask {
        return getCollectionItemsWithRequestBuilder(collectionId: collectionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get collection items
     - GET /v1/collections/{collectionId}/items
     - Returns all collection items as an array of metadata objects.  Please note that ONLY items that have had at least 1 quantity minted will be returned. If you've created an item that has not been minted yet, it will not be returned in the array response.
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - returns: RequestBuilder<[AnyCodable]> 
     */
    open class func getCollectionItemsWithRequestBuilder(collectionId: String) -> RequestBuilder<[AnyCodable]> {
        var localVariablePath = "/v1/collections/{collectionId}/items"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AnyCodable]>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get collection role
     
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter role: (query) A valid MetaFab role or bytes string representing a role, such as &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60; 
     - parameter address: (query) A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     - parameter walletId: (query) Any wallet id within the MetaFab ecosystem. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCollectionRole(collectionId: String, role: String, address: String? = nil, walletId: String? = nil, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: Bool?, _ error: Error?) -> Void)) -> RequestTask {
        return getCollectionRoleWithRequestBuilder(collectionId: collectionId, role: role, address: address, walletId: walletId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get collection role
     - GET /v1/collections/{collectionId}/roles
     - Returns a boolean (true/false) representing if the provided role for this collection has been granted to the provided address or address associated with the provided walletId.
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter role: (query) A valid MetaFab role or bytes string representing a role, such as &#x60;0xc9eb32e43bf5ecbceacf00b32281dfc5d6d700a0db676ea26ccf938a385ac3b7&#x60; 
     - parameter address: (query) A valid EVM based address. For example, &#x60;0x39cb70F972E0EE920088AeF97Dbe5c6251a9c25D&#x60;. (optional)
     - parameter walletId: (query) Any wallet id within the MetaFab ecosystem. (optional)
     - returns: RequestBuilder<Bool> 
     */
    open class func getCollectionRoleWithRequestBuilder(collectionId: String, role: String, address: String? = nil, walletId: String? = nil) -> RequestBuilder<Bool> {
        var localVariablePath = "/v1/collections/{collectionId}/roles"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "role": (wrappedValue: role.encodeToJSON(), isExplode: true),
            "address": (wrappedValue: address?.encodeToJSON(), isExplode: true),
            "walletId": (wrappedValue: walletId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Bool>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get collections
     
     - parameter xGameKey: (header) The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCollections(xGameKey: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: [GetCollections200ResponseInner]?, _ error: Error?) -> Void)) -> RequestTask {
        return getCollectionsWithRequestBuilder(xGameKey: xGameKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get collections
     - GET /v1/collections
     - Returns an array of active item collections for the game associated with the provided `X-Game-Key`.
     - parameter xGameKey: (header) The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. 
     - returns: RequestBuilder<[GetCollections200ResponseInner]> 
     */
    open class func getCollectionsWithRequestBuilder(xGameKey: String) -> RequestBuilder<[GetCollections200ResponseInner]> {
        let localVariablePath = "/v1/collections"
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Game-Key": xGameKey.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[GetCollections200ResponseInner]>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Grant collection role
     
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. 
     - parameter xPassword: (header) The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. 
     - parameter grantCollectionRoleRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func grantCollectionRole(collectionId: String, xAuthorization: String, xPassword: String, grantCollectionRoleRequest: GrantCollectionRoleRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: TransactionModel?, _ error: Error?) -> Void)) -> RequestTask {
        return grantCollectionRoleWithRequestBuilder(collectionId: collectionId, xAuthorization: xAuthorization, xPassword: xPassword, grantCollectionRoleRequest: grantCollectionRoleRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Grant collection role
     - POST /v1/collections/{collectionId}/roles
     - Grants the provided role for the collection to the provided address or address associated with the provided walletId. Granted roles give different types of authority on behalf of the collection for specific players, addresses, or contracts to perform different types of permissioned collection operations.
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. 
     - parameter xPassword: (header) The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. 
     - parameter grantCollectionRoleRequest: (body)  
     - returns: RequestBuilder<TransactionModel> 
     */
    open class func grantCollectionRoleWithRequestBuilder(collectionId: String, xAuthorization: String, xPassword: String, grantCollectionRoleRequest: GrantCollectionRoleRequest) -> RequestBuilder<TransactionModel> {
        var localVariablePath = "/v1/collections/{collectionId}/roles"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: grantCollectionRoleRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Password": xPassword.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionModel>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Mint collection item
     
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter collectionItemId: (path) Any item id for the collection. Zero, or a positive integer. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter mintCollectionItemRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func mintCollectionItem(collectionId: String, collectionItemId: Double, xAuthorization: String, xPassword: String, mintCollectionItemRequest: MintCollectionItemRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: TransactionModel?, _ error: Error?) -> Void)) -> RequestTask {
        return mintCollectionItemWithRequestBuilder(collectionId: collectionId, collectionItemId: collectionItemId, xAuthorization: xAuthorization, xPassword: xPassword, mintCollectionItemRequest: mintCollectionItemRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Mint collection item
     - POST /v1/collections/{collectionId}/items/{collectionItemId}/mints
     - Creates (mints) the specified quantity of the provided collectionItemId to the provided wallet address or wallet address associated with the provided walletId.
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter collectionItemId: (path) Any item id for the collection. Zero, or a positive integer. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter mintCollectionItemRequest: (body)  
     - returns: RequestBuilder<TransactionModel> 
     */
    open class func mintCollectionItemWithRequestBuilder(collectionId: String, collectionItemId: Double, xAuthorization: String, xPassword: String, mintCollectionItemRequest: MintCollectionItemRequest) -> RequestBuilder<TransactionModel> {
        var localVariablePath = "/v1/collections/{collectionId}/items/{collectionItemId}/mints"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let collectionItemIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionItemId))"
        let collectionItemIdPostEscape = collectionItemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionItemId}", with: collectionItemIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mintCollectionItemRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Password": xPassword.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionModel>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Revoke collection role
     
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. 
     - parameter xPassword: (header) The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. 
     - parameter revokeCollectionRoleRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func revokeCollectionRole(collectionId: String, xAuthorization: String, xPassword: String, revokeCollectionRoleRequest: RevokeCollectionRoleRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: TransactionModel?, _ error: Error?) -> Void)) -> RequestTask {
        return revokeCollectionRoleWithRequestBuilder(collectionId: collectionId, xAuthorization: xAuthorization, xPassword: xPassword, revokeCollectionRoleRequest: revokeCollectionRoleRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Revoke collection role
     - DELETE /v1/collections/{collectionId}/roles
     - Revokes the provided role for the collection to the provided address or address associated with the provided walletId.
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. 
     - parameter xPassword: (header) The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. 
     - parameter revokeCollectionRoleRequest: (body)  
     - returns: RequestBuilder<TransactionModel> 
     */
    open class func revokeCollectionRoleWithRequestBuilder(collectionId: String, xAuthorization: String, xPassword: String, revokeCollectionRoleRequest: RevokeCollectionRoleRequest) -> RequestBuilder<TransactionModel> {
        var localVariablePath = "/v1/collections/{collectionId}/roles"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: revokeCollectionRoleRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Password": xPassword.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionModel>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Set collection approval
     
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. 
     - parameter xPassword: (header) The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. 
     - parameter setCollectionApprovalRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func setCollectionApproval(collectionId: String, xAuthorization: String, xPassword: String, setCollectionApprovalRequest: SetCollectionApprovalRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: TransactionModel?, _ error: Error?) -> Void)) -> RequestTask {
        return setCollectionApprovalWithRequestBuilder(collectionId: collectionId, xAuthorization: xAuthorization, xPassword: xPassword, setCollectionApprovalRequest: setCollectionApprovalRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set collection approval
     - POST /v1/collections/{collectionId}/approvals
     - Sets approval for the provided address or wallet address associated with the provided walletId to operate on behalf of the authenticating game or player's owned items for this collection. Setting an approved value of `true` allows the provided address or address associated with the provided walletId to transfer and burn items from this collection on behalf of the authenticated game or player's wallet address.
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. 
     - parameter xPassword: (header) The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. 
     - parameter setCollectionApprovalRequest: (body)  
     - returns: RequestBuilder<TransactionModel> 
     */
    open class func setCollectionApprovalWithRequestBuilder(collectionId: String, xAuthorization: String, xPassword: String, setCollectionApprovalRequest: SetCollectionApprovalRequest) -> RequestBuilder<TransactionModel> {
        var localVariablePath = "/v1/collections/{collectionId}/approvals"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setCollectionApprovalRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Password": xPassword.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionModel>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Set collection item timelock
     
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter collectionItemId: (path) Any item id for the collection. Zero, or a positive integer. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter setCollectionItemTimelockRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func setCollectionItemTimelock(collectionId: String, collectionItemId: Double, xAuthorization: String, xPassword: String, setCollectionItemTimelockRequest: SetCollectionItemTimelockRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: TransactionModel?, _ error: Error?) -> Void)) -> RequestTask {
        return setCollectionItemTimelockWithRequestBuilder(collectionId: collectionId, collectionItemId: collectionItemId, xAuthorization: xAuthorization, xPassword: xPassword, setCollectionItemTimelockRequest: setCollectionItemTimelockRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set collection item timelock
     - POST /v1/collections/{collectionId}/items/{collectionItemId}/timelocks
     - Sets the item timelock for the provided collection itemId. The timelock is a unix timestamp (in seconds) that defines a period in time of when an item may be transferred by players. Until the timelock timestamp has passed, the itemId for the given timelock may not be transferred, sold, traded, etc. A timelock of 0 (default) means that there is no timelock set on the itemId and it can be freely transferred, traded, etc.
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter collectionItemId: (path) Any item id for the collection. Zero, or a positive integer. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter setCollectionItemTimelockRequest: (body)  
     - returns: RequestBuilder<TransactionModel> 
     */
    open class func setCollectionItemTimelockWithRequestBuilder(collectionId: String, collectionItemId: Double, xAuthorization: String, xPassword: String, setCollectionItemTimelockRequest: SetCollectionItemTimelockRequest) -> RequestBuilder<TransactionModel> {
        var localVariablePath = "/v1/collections/{collectionId}/items/{collectionItemId}/timelocks"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let collectionItemIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionItemId))"
        let collectionItemIdPostEscape = collectionItemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionItemId}", with: collectionItemIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setCollectionItemTimelockRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Password": xPassword.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionModel>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Transfer collection item
     
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter collectionItemId: (path) Any item id for the collection. Zero, or a positive integer. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. 
     - parameter xPassword: (header) The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. 
     - parameter transferCollectionItemRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func transferCollectionItem(collectionId: String, collectionItemId: Double, xAuthorization: String, xPassword: String, transferCollectionItemRequest: TransferCollectionItemRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: TransactionModel?, _ error: Error?) -> Void)) -> RequestTask {
        return transferCollectionItemWithRequestBuilder(collectionId: collectionId, collectionItemId: collectionItemId, xAuthorization: xAuthorization, xPassword: xPassword, transferCollectionItemRequest: transferCollectionItemRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Transfer collection item
     - POST /v1/collections/{collectionId}/items/{collectionItemId}/transfers
     - Transfers specified quantity of itemId to the provided wallet address or wallet address associated with the provided walletId.
     - parameter collectionId: (path) Any collection id within the MetaFab ecosystem. 
     - parameter collectionItemId: (path) Any item id for the collection. Zero, or a positive integer. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. 
     - parameter xPassword: (header) The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. 
     - parameter transferCollectionItemRequest: (body)  
     - returns: RequestBuilder<TransactionModel> 
     */
    open class func transferCollectionItemWithRequestBuilder(collectionId: String, collectionItemId: Double, xAuthorization: String, xPassword: String, transferCollectionItemRequest: TransferCollectionItemRequest) -> RequestBuilder<TransactionModel> {
        var localVariablePath = "/v1/collections/{collectionId}/items/{collectionItemId}/transfers"
        let collectionIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionId))"
        let collectionIdPostEscape = collectionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionId}", with: collectionIdPostEscape, options: .literal, range: nil)
        let collectionItemIdPreEscape = "\(APIHelper.mapValueToPathItem(collectionItemId))"
        let collectionItemIdPostEscape = collectionItemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{collectionItemId}", with: collectionItemIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transferCollectionItemRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Password": xPassword.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionModel>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
