//
// PlayersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PlayersAPI {

    /**
     Authenticate player
     
     - parameter xGameKey: (header) The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authPlayer(xGameKey: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: AuthPlayer200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return authPlayerWithRequestBuilder(xGameKey: xGameKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Authenticate player
     - GET /v1/players/auth
     - Returns an existing player object containing access token, wallet, and other details for a game when provided a valid username and password login using Basic Auth.
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter xGameKey: (header) The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. 
     - returns: RequestBuilder<AuthPlayer200Response> 
     */
    open class func authPlayerWithRequestBuilder(xGameKey: String) -> RequestBuilder<AuthPlayer200Response> {
        let localVariablePath = "/v1/players/auth"
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Game-Key": xGameKey.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthPlayer200Response>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create player
     
     - parameter xGameKey: (header) The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. 
     - parameter createPlayerRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createPlayer(xGameKey: String, createPlayerRequest: CreatePlayerRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: AuthPlayer200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return createPlayerWithRequestBuilder(xGameKey: xGameKey, createPlayerRequest: createPlayerRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create player
     - POST /v1/players
     - Create a new player for a game. Players are automatically associated with an internally managed wallet.  Player access tokens can be used to directly interact with any MetaFab managed contracts, currencies, items collections, marketplaces and more. Player interactions are also gasless by default, completely removing all crypto friction for players to engage with your MetaFab supported games.
     - parameter xGameKey: (header) The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. 
     - parameter createPlayerRequest: (body)  
     - returns: RequestBuilder<AuthPlayer200Response> 
     */
    open class func createPlayerWithRequestBuilder(xGameKey: String, createPlayerRequest: CreatePlayerRequest) -> RequestBuilder<AuthPlayer200Response> {
        let localVariablePath = "/v1/players"
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createPlayerRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Game-Key": xGameKey.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthPlayer200Response>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get player
     
     - parameter playerId: (path) Any player id within the MetaFab ecosystem. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPlayer(playerId: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: PublicPlayer?, _ error: Error?) -> Void)) -> RequestTask {
        return getPlayerWithRequestBuilder(playerId: playerId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get player
     - GET /v1/players/{playerId}
     - Returns a player object for the provided player id.
     - parameter playerId: (path) Any player id within the MetaFab ecosystem. 
     - returns: RequestBuilder<PublicPlayer> 
     */
    open class func getPlayerWithRequestBuilder(playerId: String) -> RequestBuilder<PublicPlayer> {
        var localVariablePath = "/v1/players/{playerId}"
        let playerIdPreEscape = "\(APIHelper.mapValueToPathItem(playerId))"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PublicPlayer>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get player data
     
     - parameter playerId: (path) Any player id within the MetaFab ecosystem. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPlayerData(playerId: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: GetPlayerData200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getPlayerDataWithRequestBuilder(playerId: playerId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get player data
     - GET /v1/players/{playerId}/data
     - Returns the latest public and protected data as an object for the provided playerId.
     - parameter playerId: (path) Any player id within the MetaFab ecosystem. 
     - returns: RequestBuilder<GetPlayerData200Response> 
     */
    open class func getPlayerDataWithRequestBuilder(playerId: String) -> RequestBuilder<GetPlayerData200Response> {
        var localVariablePath = "/v1/players/{playerId}/data"
        let playerIdPreEscape = "\(APIHelper.mapValueToPathItem(playerId))"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetPlayerData200Response>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get players
     
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getPlayers(xAuthorization: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: [PublicPlayer]?, _ error: Error?) -> Void)) -> RequestTask {
        return getPlayersWithRequestBuilder(xAuthorization: xAuthorization).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get players
     - GET /v1/players
     - Returns all players for the authenticated game as an array of player objects.
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - returns: RequestBuilder<[PublicPlayer]> 
     */
    open class func getPlayersWithRequestBuilder(xAuthorization: String) -> RequestBuilder<[PublicPlayer]> {
        let localVariablePath = "/v1/players"
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[PublicPlayer]>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Remove player connected wallet
     
     - parameter playerId: (path) Any player id within the MetaFab ecosystem. 
     - parameter playerWalletId: (path) Any player wallet id within the MetaFab ecosystem. 
     - parameter removePlayerConnectedWalletRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func removePlayerConnectedWallet(playerId: String, playerWalletId: String, removePlayerConnectedWalletRequest: RemovePlayerConnectedWalletRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return removePlayerConnectedWalletWithRequestBuilder(playerId: playerId, playerWalletId: playerWalletId, removePlayerConnectedWalletRequest: removePlayerConnectedWalletRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove player connected wallet
     - DELETE /v1/players/{playerId}/wallets/{playerWalletId}
     - Removes an external wallet from a player account. The player's wallet is reverted to their custodial wallet.
     - parameter playerId: (path) Any player id within the MetaFab ecosystem. 
     - parameter playerWalletId: (path) Any player wallet id within the MetaFab ecosystem. 
     - parameter removePlayerConnectedWalletRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func removePlayerConnectedWalletWithRequestBuilder(playerId: String, playerWalletId: String, removePlayerConnectedWalletRequest: RemovePlayerConnectedWalletRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/players/{playerId}/wallets/{playerWalletId}"
        let playerIdPreEscape = "\(APIHelper.mapValueToPathItem(playerId))"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let playerWalletIdPreEscape = "\(APIHelper.mapValueToPathItem(playerWalletId))"
        let playerWalletIdPostEscape = playerWalletIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playerWalletId}", with: playerWalletIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: removePlayerConnectedWalletRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = MetaFabSwift5API.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Set player connected wallet
     
     - parameter playerId: (path) Any player id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;accessToken&#x60; of the authenticating player. 
     - parameter setPlayerConnectedWalletRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func setPlayerConnectedWallet(playerId: String, xAuthorization: String, setPlayerConnectedWalletRequest: SetPlayerConnectedWalletRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: SetPlayerConnectedWallet200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return setPlayerConnectedWalletWithRequestBuilder(playerId: playerId, xAuthorization: xAuthorization, setPlayerConnectedWalletRequest: setPlayerConnectedWalletRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set player connected wallet
     - POST /v1/players/{playerId}/wallets
     - Sets an external wallet as the wallet for a player account. The set wallet can transact gaslessly with all MetaFab related systems through the same MetaFab API calls as custodial wallets without requiring transaction signing or private keys.  This is done through an internal system MetaFab has created that allows an external connected wallet to delegate transaction signing for a specific game's set of contracts to a player's password protected custodial wallet. This allow the custodial wallet to sign and submit transactions to a specific game's related contracts as if they were signed and submitted by the connected external wallet. This also means that all earned tokens, purchased items and any interactions happen and are recorded on chain as the external connected wallet. No additional logic needs to be writted by developers to support both custodial and external wallets, everything just works.  Finally, this endpoint is meant for advanced users. The majority of developers who want to implement external wallet support for their game can do so without any extra work through our whitelabeled wallet connection feature that implements this endpoint underneath the hood without any required work.
     - parameter playerId: (path) Any player id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;accessToken&#x60; of the authenticating player. 
     - parameter setPlayerConnectedWalletRequest: (body)  
     - returns: RequestBuilder<SetPlayerConnectedWallet200Response> 
     */
    open class func setPlayerConnectedWalletWithRequestBuilder(playerId: String, xAuthorization: String, setPlayerConnectedWalletRequest: SetPlayerConnectedWalletRequest) -> RequestBuilder<SetPlayerConnectedWallet200Response> {
        var localVariablePath = "/v1/players/{playerId}/wallets"
        let playerIdPreEscape = "\(APIHelper.mapValueToPathItem(playerId))"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setPlayerConnectedWalletRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SetPlayerConnectedWallet200Response>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Set player data
     
     - parameter playerId: (path) Any player id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. 
     - parameter setPlayerDataRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func setPlayerData(playerId: String, xAuthorization: String, setPlayerDataRequest: SetPlayerDataRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: GetPlayerData200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return setPlayerDataWithRequestBuilder(playerId: playerId, xAuthorization: xAuthorization, setPlayerDataRequest: setPlayerDataRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set player data
     - POST /v1/players/{playerId}/data
     - Creates or updates public and/or protected data for the provided playerId. Data updates are performed using deep merging. This means that when you update any top level or nested properties specific to player public or protected data, you only need to include the properties you are making changes to. Any existing properties not included in request body arguments will be retained on the player data object.  Please note, When writing an array type for a player, arrays do not follow the deep merge approach. If you add or remove an item from an array, the entire array must be passed as an argument when updating the related property for player public or protected data.
     - parameter playerId: (path) Any player id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. 
     - parameter setPlayerDataRequest: (body)  
     - returns: RequestBuilder<GetPlayerData200Response> 
     */
    open class func setPlayerDataWithRequestBuilder(playerId: String, xAuthorization: String, setPlayerDataRequest: SetPlayerDataRequest) -> RequestBuilder<GetPlayerData200Response> {
        var localVariablePath = "/v1/players/{playerId}/data"
        let playerIdPreEscape = "\(APIHelper.mapValueToPathItem(playerId))"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setPlayerDataRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetPlayerData200Response>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update player
     
     - parameter playerId: (path) Any player id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;accessToken&#x60; of the authenticating player. 
     - parameter updatePlayerRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updatePlayer(playerId: String, xAuthorization: String, updatePlayerRequest: UpdatePlayerRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: PlayerModel?, _ error: Error?) -> Void)) -> RequestTask {
        return updatePlayerWithRequestBuilder(playerId: playerId, xAuthorization: xAuthorization, updatePlayerRequest: updatePlayerRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update player
     - PATCH /v1/players/{playerId}
     - Update various fields specific to a player. Such as changing its password and resetting its access token.
     - parameter playerId: (path) Any player id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;accessToken&#x60; of the authenticating player. 
     - parameter updatePlayerRequest: (body)  
     - returns: RequestBuilder<PlayerModel> 
     */
    open class func updatePlayerWithRequestBuilder(playerId: String, xAuthorization: String, updatePlayerRequest: UpdatePlayerRequest) -> RequestBuilder<PlayerModel> {
        var localVariablePath = "/v1/players/{playerId}"
        let playerIdPreEscape = "\(APIHelper.mapValueToPathItem(playerId))"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updatePlayerRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PlayerModel>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
