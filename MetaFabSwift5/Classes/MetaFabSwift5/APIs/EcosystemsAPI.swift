//
// EcosystemsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class EcosystemsAPI {

    /**
     Approve ecosystem game
     
     - parameter ecosystemId: (path) The ecosystem id of the authenticating ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating ecosystem. 
     - parameter approveEcosystemGameRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func approveEcosystemGame(ecosystemId: String, xAuthorization: String, approveEcosystemGameRequest: ApproveEcosystemGameRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return approveEcosystemGameWithRequestBuilder(ecosystemId: ecosystemId, xAuthorization: xAuthorization, approveEcosystemGameRequest: approveEcosystemGameRequest).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Approve ecosystem game
     - POST /v1/ecosystems/{ecosystemId}/games
     - Approves a game for an ecosystem. By approving a game, it allows that game to integrate the ability for profile accounts from an ecosystem to login directly to the approved game and play. This also allows games to request access to assets held at the profile level for the game to frictionlessly interact with on behalf of the profile.
     - parameter ecosystemId: (path) The ecosystem id of the authenticating ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating ecosystem. 
     - parameter approveEcosystemGameRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func approveEcosystemGameWithRequestBuilder(ecosystemId: String, xAuthorization: String, approveEcosystemGameRequest: ApproveEcosystemGameRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/ecosystems/{ecosystemId}/games"
        let ecosystemIdPreEscape = "\(APIHelper.mapValueToPathItem(ecosystemId))"
        let ecosystemIdPostEscape = ecosystemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ecosystemId}", with: ecosystemIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: approveEcosystemGameRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = MetaFabSwift5API.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Authenticate ecosystem
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authEcosystem(apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: EcosystemModel?, _ error: Error?) -> Void)) -> RequestTask {
        return authEcosystemWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Authenticate ecosystem
     - GET /v1/ecosystems/auth
     - Returns an existing ecosystem object containing authorization keys when provided a valid email (in place of username) and password login using Basic Auth.
     - BASIC:
       - type: http
       - name: basicAuth
     - returns: RequestBuilder<EcosystemModel> 
     */
    open class func authEcosystemWithRequestBuilder() -> RequestBuilder<EcosystemModel> {
        let localVariablePath = "/v1/ecosystems/auth"
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EcosystemModel>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Authenticate profile
     
     - parameter xEcosystemKey: (header) The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authProfile(xEcosystemKey: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: AuthProfile200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return authProfileWithRequestBuilder(xEcosystemKey: xEcosystemKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Authenticate profile
     - GET /v1/profiles/auth
     - Returns an existing profile object containing access token, wallet, and other details when provided a valid profile username and password login using Basic Auth.
     - BASIC:
       - type: http
       - name: basicAuth
     - parameter xEcosystemKey: (header) The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc. 
     - returns: RequestBuilder<AuthProfile200Response> 
     */
    open class func authProfileWithRequestBuilder(xEcosystemKey: String) -> RequestBuilder<AuthProfile200Response> {
        let localVariablePath = "/v1/profiles/auth"
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Ecosystem-Key": xEcosystemKey.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthProfile200Response>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Authenticate profile player
     
     - parameter profileId: (path) The profile id of the authenticating profile. 
     - parameter gameId: (path) Any game id within the MetaFab platform. 
     - parameter xAuthorization: (header) The &#x60;accessToken&#x60; of the authenticating profile. 
     - parameter xWalletDecryptKey: (header) The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. 
     - parameter xUsername: (header) The username of a player. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func authProfilePlayer(profileId: String, gameId: String, xAuthorization: String, xWalletDecryptKey: String, xUsername: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: AuthPlayer200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return authProfilePlayerWithRequestBuilder(profileId: profileId, gameId: gameId, xAuthorization: xAuthorization, xWalletDecryptKey: xWalletDecryptKey, xUsername: xUsername).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Authenticate profile player
     - GET /v1/profiles/{profileId}/games/{gameId}/players/auth
     - Returns an existing player object containing access token, wallet, wallet decrypt key, profile authorization and other details for a game when provided profile authentication and the player's username.
     - parameter profileId: (path) The profile id of the authenticating profile. 
     - parameter gameId: (path) Any game id within the MetaFab platform. 
     - parameter xAuthorization: (header) The &#x60;accessToken&#x60; of the authenticating profile. 
     - parameter xWalletDecryptKey: (header) The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. 
     - parameter xUsername: (header) The username of a player. 
     - returns: RequestBuilder<AuthPlayer200Response> 
     */
    open class func authProfilePlayerWithRequestBuilder(profileId: String, gameId: String, xAuthorization: String, xWalletDecryptKey: String, xUsername: String) -> RequestBuilder<AuthPlayer200Response> {
        var localVariablePath = "/v1/profiles/{profileId}/games/{gameId}/players/auth"
        let profileIdPreEscape = "\(APIHelper.mapValueToPathItem(profileId))"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let gameIdPreEscape = "\(APIHelper.mapValueToPathItem(gameId))"
        let gameIdPostEscape = gameIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{gameId}", with: gameIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Wallet-Decrypt-Key": xWalletDecryptKey.encodeToJSON(),
            "X-Username": xUsername.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthPlayer200Response>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Create ecosystem
     
     - parameter createEcosystemRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createEcosystem(createEcosystemRequest: CreateEcosystemRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: EcosystemModel?, _ error: Error?) -> Void)) -> RequestTask {
        return createEcosystemWithRequestBuilder(createEcosystemRequest: createEcosystemRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create ecosystem
     - POST /v1/ecosystems
     - Create a new ecosystem. An ecosystem is a parent entity that many profiles live under for a given ecosystem of games. Ecosystems allow your players to create one profile within your ecosystem that allows a single account and wallet to be used across all of the approved games in your ecosystem that they play.
     - parameter createEcosystemRequest: (body)  
     - returns: RequestBuilder<EcosystemModel> 
     */
    open class func createEcosystemWithRequestBuilder(createEcosystemRequest: CreateEcosystemRequest) -> RequestBuilder<EcosystemModel> {
        let localVariablePath = "/v1/ecosystems"
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createEcosystemRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EcosystemModel>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Create profile
     
     - parameter xEcosystemKey: (header) The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc. 
     - parameter createProfileRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createProfile(xEcosystemKey: String, createProfileRequest: CreateProfileRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: AuthProfile200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return createProfileWithRequestBuilder(xEcosystemKey: xEcosystemKey, createProfileRequest: createProfileRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create profile
     - POST /v1/profiles
     - Create a new profile. Profiles are automatically associated with an internally managed wallet. Profiles can be thought of as a umbrella account that can be used to sign into and create player accounts across many games and have a singular asset store wallet at the profile level that can be used across all connected player accounts for games those player accounts are a part of.  Profiles are associated to a parent ecosystem of games. This allows an ecosystem to approve a permissioned set of games that can request authorized wallet permissions from profiles of players for their game.
     - parameter xEcosystemKey: (header) The &#x60;publishedKey&#x60; of a specific ecosystem. This can be shared or included in clients, websites, etc. 
     - parameter createProfileRequest: (body)  
     - returns: RequestBuilder<AuthProfile200Response> 
     */
    open class func createProfileWithRequestBuilder(xEcosystemKey: String, createProfileRequest: CreateProfileRequest) -> RequestBuilder<AuthProfile200Response> {
        let localVariablePath = "/v1/profiles"
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createProfileRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Ecosystem-Key": xEcosystemKey.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthProfile200Response>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Create profile player
     
     - parameter profileId: (path) The profile id of the authenticating profile. 
     - parameter gameId: (path) Any game id within the MetaFab platform. 
     - parameter xAuthorization: (header) The &#x60;accessToken&#x60; of the authenticating profile. 
     - parameter xWalletDecryptKey: (header) The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. 
     - parameter createProfilePlayerRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createProfilePlayer(profileId: String, gameId: String, xAuthorization: String, xWalletDecryptKey: String, createProfilePlayerRequest: CreateProfilePlayerRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: AuthPlayer200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return createProfilePlayerWithRequestBuilder(profileId: profileId, gameId: gameId, xAuthorization: xAuthorization, xWalletDecryptKey: xWalletDecryptKey, createProfilePlayerRequest: createProfilePlayerRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create profile player
     - POST /v1/profiles/{profileId}/games/{gameId}/players
     - Creates a new player account for the provided game id linked to the authenticating profile. The created player account will default to using the parent profile's wallet for any transactions, wallet content balance checks and verifications, and more.
     - parameter profileId: (path) The profile id of the authenticating profile. 
     - parameter gameId: (path) Any game id within the MetaFab platform. 
     - parameter xAuthorization: (header) The &#x60;accessToken&#x60; of the authenticating profile. 
     - parameter xWalletDecryptKey: (header) The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. 
     - parameter createProfilePlayerRequest: (body)  
     - returns: RequestBuilder<AuthPlayer200Response> 
     */
    open class func createProfilePlayerWithRequestBuilder(profileId: String, gameId: String, xAuthorization: String, xWalletDecryptKey: String, createProfilePlayerRequest: CreateProfilePlayerRequest) -> RequestBuilder<AuthPlayer200Response> {
        var localVariablePath = "/v1/profiles/{profileId}/games/{gameId}/players"
        let profileIdPreEscape = "\(APIHelper.mapValueToPathItem(profileId))"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let gameIdPreEscape = "\(APIHelper.mapValueToPathItem(gameId))"
        let gameIdPostEscape = gameIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{gameId}", with: gameIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createProfilePlayerRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Wallet-Decrypt-Key": xWalletDecryptKey.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AuthPlayer200Response>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get ecosystem
     
     - parameter ecosystemId: (path) Any ecosystem id within the MetaFab platform. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getEcosystem(ecosystemId: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: PublicEcosystem?, _ error: Error?) -> Void)) -> RequestTask {
        return getEcosystemWithRequestBuilder(ecosystemId: ecosystemId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get ecosystem
     - GET /v1/ecosystems/{ecosystemId}
     - Returns a ecosystem object for the provided ecosystem id.
     - parameter ecosystemId: (path) Any ecosystem id within the MetaFab platform. 
     - returns: RequestBuilder<PublicEcosystem> 
     */
    open class func getEcosystemWithRequestBuilder(ecosystemId: String) -> RequestBuilder<PublicEcosystem> {
        var localVariablePath = "/v1/ecosystems/{ecosystemId}"
        let ecosystemIdPreEscape = "\(APIHelper.mapValueToPathItem(ecosystemId))"
        let ecosystemIdPostEscape = ecosystemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ecosystemId}", with: ecosystemIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PublicEcosystem>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get ecosystem game
     
     - parameter ecosystemId: (path) Any ecosystem id within the MetaFab platform. 
     - parameter gameId: (path) Any game id within the MetaFab platform. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getEcosystemGame(ecosystemId: String, gameId: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: PublicGame?, _ error: Error?) -> Void)) -> RequestTask {
        return getEcosystemGameWithRequestBuilder(ecosystemId: ecosystemId, gameId: gameId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get ecosystem game
     - GET /v1/ecosystems/{ecosystemId}/games/{gameId}
     - Returns a game object for the provided game id that the ecosystem has approved.
     - parameter ecosystemId: (path) Any ecosystem id within the MetaFab platform. 
     - parameter gameId: (path) Any game id within the MetaFab platform. 
     - returns: RequestBuilder<PublicGame> 
     */
    open class func getEcosystemGameWithRequestBuilder(ecosystemId: String, gameId: String) -> RequestBuilder<PublicGame> {
        var localVariablePath = "/v1/ecosystems/{ecosystemId}/games/{gameId}"
        let ecosystemIdPreEscape = "\(APIHelper.mapValueToPathItem(ecosystemId))"
        let ecosystemIdPostEscape = ecosystemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ecosystemId}", with: ecosystemIdPostEscape, options: .literal, range: nil)
        let gameIdPreEscape = "\(APIHelper.mapValueToPathItem(gameId))"
        let gameIdPostEscape = gameIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{gameId}", with: gameIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PublicGame>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get ecosystem games
     
     - parameter ecosystemId: (path) Any ecosystem id within the MetaFab platform. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getEcosystemGames(ecosystemId: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: [PublicGame]?, _ error: Error?) -> Void)) -> RequestTask {
        return getEcosystemGamesWithRequestBuilder(ecosystemId: ecosystemId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get ecosystem games
     - GET /v1/ecosystems/{ecosystemId}/games
     - Returns an array of games the ecosystem has approved.
     - parameter ecosystemId: (path) Any ecosystem id within the MetaFab platform. 
     - returns: RequestBuilder<[PublicGame]> 
     */
    open class func getEcosystemGamesWithRequestBuilder(ecosystemId: String) -> RequestBuilder<[PublicGame]> {
        var localVariablePath = "/v1/ecosystems/{ecosystemId}/games"
        let ecosystemIdPreEscape = "\(APIHelper.mapValueToPathItem(ecosystemId))"
        let ecosystemIdPostEscape = ecosystemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ecosystemId}", with: ecosystemIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[PublicGame]>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get profile game
     
     - parameter profileId: (path) The profile id of the authenticating profile. 
     - parameter gameId: (path) Any game id within the MetaFab platform. 
     - parameter xAuthorization: (header) The &#x60;accessToken&#x60; of the authenticating profile. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getProfileGame(profileId: String, gameId: String, xAuthorization: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: GetProfileGames200ResponseInner?, _ error: Error?) -> Void)) -> RequestTask {
        return getProfileGameWithRequestBuilder(profileId: profileId, gameId: gameId, xAuthorization: xAuthorization).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get profile game
     - GET /v1/profiles/{profileId}/games/{gameId}
     - Returns a game this profile has connected player accounts for.
     - parameter profileId: (path) The profile id of the authenticating profile. 
     - parameter gameId: (path) Any game id within the MetaFab platform. 
     - parameter xAuthorization: (header) The &#x60;accessToken&#x60; of the authenticating profile. 
     - returns: RequestBuilder<GetProfileGames200ResponseInner> 
     */
    open class func getProfileGameWithRequestBuilder(profileId: String, gameId: String, xAuthorization: String) -> RequestBuilder<GetProfileGames200ResponseInner> {
        var localVariablePath = "/v1/profiles/{profileId}/games/{gameId}"
        let profileIdPreEscape = "\(APIHelper.mapValueToPathItem(profileId))"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let gameIdPreEscape = "\(APIHelper.mapValueToPathItem(gameId))"
        let gameIdPostEscape = gameIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{gameId}", with: gameIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetProfileGames200ResponseInner>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get profile games
     
     - parameter profileId: (path) The profile id of the authenticating profile. 
     - parameter xAuthorization: (header) The &#x60;accessToken&#x60; of the authenticating profile. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getProfileGames(profileId: String, xAuthorization: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: [GetProfileGames200ResponseInner]?, _ error: Error?) -> Void)) -> RequestTask {
        return getProfileGamesWithRequestBuilder(profileId: profileId, xAuthorization: xAuthorization).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get profile games
     - GET /v1/profiles/{profileId}/games
     - Returns an array of games the authorized profile has connected player accounts for.
     - parameter profileId: (path) The profile id of the authenticating profile. 
     - parameter xAuthorization: (header) The &#x60;accessToken&#x60; of the authenticating profile. 
     - returns: RequestBuilder<[GetProfileGames200ResponseInner]> 
     */
    open class func getProfileGamesWithRequestBuilder(profileId: String, xAuthorization: String) -> RequestBuilder<[GetProfileGames200ResponseInner]> {
        var localVariablePath = "/v1/profiles/{profileId}/games"
        let profileIdPreEscape = "\(APIHelper.mapValueToPathItem(profileId))"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[GetProfileGames200ResponseInner]>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Unapprove ecosystem game
     
     - parameter ecosystemId: (path) The ecosystem id of the authenticating ecosystem. 
     - parameter gameId: (path) Any game id within the MetaFab platform. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating ecosystem. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func unapproveEcosystemGame(ecosystemId: String, gameId: String, xAuthorization: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return unapproveEcosystemGameWithRequestBuilder(ecosystemId: ecosystemId, gameId: gameId, xAuthorization: xAuthorization).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Unapprove ecosystem game
     - DELETE /v1/ecosystems/{ecosystemId}/games/{gameId}
     - Unapproves a game for an ecosystem. The game will no longer be able to allow profiles from the ecosystem to login. All profile permissions approved for the game will also be revoked.
     - parameter ecosystemId: (path) The ecosystem id of the authenticating ecosystem. 
     - parameter gameId: (path) Any game id within the MetaFab platform. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating ecosystem. 
     - returns: RequestBuilder<Void> 
     */
    open class func unapproveEcosystemGameWithRequestBuilder(ecosystemId: String, gameId: String, xAuthorization: String) -> RequestBuilder<Void> {
        var localVariablePath = "/v1/ecosystems/{ecosystemId}/games/{gameId}"
        let ecosystemIdPreEscape = "\(APIHelper.mapValueToPathItem(ecosystemId))"
        let ecosystemIdPostEscape = ecosystemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ecosystemId}", with: ecosystemIdPostEscape, options: .literal, range: nil)
        let gameIdPreEscape = "\(APIHelper.mapValueToPathItem(gameId))"
        let gameIdPostEscape = gameIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{gameId}", with: gameIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = MetaFabSwift5API.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update ecosystem
     
     - parameter ecosystemId: (path) The ecosystem id of the authenticating ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating ecosystem. 
     - parameter updateEcosystemRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateEcosystem(ecosystemId: String, xAuthorization: String, updateEcosystemRequest: UpdateEcosystemRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: EcosystemModel?, _ error: Error?) -> Void)) -> RequestTask {
        return updateEcosystemWithRequestBuilder(ecosystemId: ecosystemId, xAuthorization: xAuthorization, updateEcosystemRequest: updateEcosystemRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update ecosystem
     - PATCH /v1/ecosystems/{ecosystemId}
     - Update various fields specific to an ecosystem. Such as changing its password, resetting its published or secret key, or updating its approved games.
     - parameter ecosystemId: (path) The ecosystem id of the authenticating ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating ecosystem. 
     - parameter updateEcosystemRequest: (body)  
     - returns: RequestBuilder<EcosystemModel> 
     */
    open class func updateEcosystemWithRequestBuilder(ecosystemId: String, xAuthorization: String, updateEcosystemRequest: UpdateEcosystemRequest) -> RequestBuilder<EcosystemModel> {
        var localVariablePath = "/v1/ecosystems/{ecosystemId}"
        let ecosystemIdPreEscape = "\(APIHelper.mapValueToPathItem(ecosystemId))"
        let ecosystemIdPostEscape = ecosystemIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{ecosystemId}", with: ecosystemIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateEcosystemRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<EcosystemModel>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update profile
     
     - parameter profileId: (path) The profile id of the authenticating profile. 
     - parameter xAuthorization: (header) The &#x60;accessToken&#x60; of the authenticating profile. 
     - parameter updateProfileRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateProfile(profileId: String, xAuthorization: String, updateProfileRequest: UpdateProfileRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: ProfileModel?, _ error: Error?) -> Void)) -> RequestTask {
        return updateProfileWithRequestBuilder(profileId: profileId, xAuthorization: xAuthorization, updateProfileRequest: updateProfileRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update profile
     - PATCH /v1/profiles/{profileId}
     - Update various fields specific to a profile. Such as changing its password and resetting its access token.
     - parameter profileId: (path) The profile id of the authenticating profile. 
     - parameter xAuthorization: (header) The &#x60;accessToken&#x60; of the authenticating profile. 
     - parameter updateProfileRequest: (body)  
     - returns: RequestBuilder<ProfileModel> 
     */
    open class func updateProfileWithRequestBuilder(profileId: String, xAuthorization: String, updateProfileRequest: UpdateProfileRequest) -> RequestBuilder<ProfileModel> {
        var localVariablePath = "/v1/profiles/{profileId}"
        let profileIdPreEscape = "\(APIHelper.mapValueToPathItem(profileId))"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateProfileRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProfileModel>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update profile player
     
     - parameter profileId: (path) The profile id of the authenticating profile. 
     - parameter gameId: (path) Any game id within the MetaFab platform. 
     - parameter playerId: (path) Any player id within the MetaFab platform. 
     - parameter xAuthorization: (header) The &#x60;accessToken&#x60; of the authenticating profile. 
     - parameter xWalletDecryptKey: (header) The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. 
     - parameter updateProfilePlayerRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateProfilePlayer(profileId: String, gameId: String, playerId: String, xAuthorization: String, xWalletDecryptKey: String, updateProfilePlayerRequest: UpdateProfilePlayerRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: UpdateProfilePlayer200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return updateProfilePlayerWithRequestBuilder(profileId: profileId, gameId: gameId, playerId: playerId, xAuthorization: xAuthorization, xWalletDecryptKey: xWalletDecryptKey, updateProfilePlayerRequest: updateProfilePlayerRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update profile player
     - PATCH /v1/profiles/{profileId}/games/{gameId}/players/{playerId}
     - Update various fields specific to a player. Such as changing its permissions.
     - parameter profileId: (path) The profile id of the authenticating profile. 
     - parameter gameId: (path) Any game id within the MetaFab platform. 
     - parameter playerId: (path) Any player id within the MetaFab platform. 
     - parameter xAuthorization: (header) The &#x60;accessToken&#x60; of the authenticating profile. 
     - parameter xWalletDecryptKey: (header) The &#x60;walletDecryptKey&#x60; of the authenticating profile. Required to decrypt and perform blockchain transactions with the profile wallet. 
     - parameter updateProfilePlayerRequest: (body)  
     - returns: RequestBuilder<UpdateProfilePlayer200Response> 
     */
    open class func updateProfilePlayerWithRequestBuilder(profileId: String, gameId: String, playerId: String, xAuthorization: String, xWalletDecryptKey: String, updateProfilePlayerRequest: UpdateProfilePlayerRequest) -> RequestBuilder<UpdateProfilePlayer200Response> {
        var localVariablePath = "/v1/profiles/{profileId}/games/{gameId}/players/{playerId}"
        let profileIdPreEscape = "\(APIHelper.mapValueToPathItem(profileId))"
        let profileIdPostEscape = profileIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{profileId}", with: profileIdPostEscape, options: .literal, range: nil)
        let gameIdPreEscape = "\(APIHelper.mapValueToPathItem(gameId))"
        let gameIdPostEscape = gameIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{gameId}", with: gameIdPostEscape, options: .literal, range: nil)
        let playerIdPreEscape = "\(APIHelper.mapValueToPathItem(playerId))"
        let playerIdPostEscape = playerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{playerId}", with: playerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateProfilePlayerRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Wallet-Decrypt-Key": xWalletDecryptKey.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UpdateProfilePlayer200Response>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
