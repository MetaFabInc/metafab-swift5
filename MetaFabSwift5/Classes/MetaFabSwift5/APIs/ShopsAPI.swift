//
// ShopsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ShopsAPI {

    /**
     Create shop
     
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter createShopRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createShop(xAuthorization: String, xPassword: String, createShopRequest: CreateShopRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: CreateShop200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return createShopWithRequestBuilder(xAuthorization: xAuthorization, xPassword: xPassword, createShopRequest: createShopRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create shop
     - POST /v1/shops
     - Creates a new game shop and deploys a shop contract on behalf of the authenticating game's primary wallet. The deployed shop contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, a shop allows you to create shop offers for some set of item(s) to another set of item(s) or any mix of currency. Shops completely support gasless player transactions.
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter createShopRequest: (body)  
     - returns: RequestBuilder<CreateShop200Response> 
     */
    open class func createShopWithRequestBuilder(xAuthorization: String, xPassword: String, createShopRequest: CreateShopRequest) -> RequestBuilder<CreateShop200Response> {
        let localVariablePath = "/v1/shops"
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createShopRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Password": xPassword.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateShop200Response>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get shop offer
     
     - parameter shopId: (path) Any shop id within the MetaFab ecosystem. 
     - parameter shopOfferId: (path) Any offer id for the shop. Zero, or a positive integer. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getShopOffer(shopId: String, shopOfferId: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: ShopOffer?, _ error: Error?) -> Void)) -> RequestTask {
        return getShopOfferWithRequestBuilder(shopId: shopId, shopOfferId: shopOfferId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get shop offer
     - GET /v1/shops/{shopId}/items/{shopOfferId}
     - Returns a shop offer object for the provided shopOfferId.
     - parameter shopId: (path) Any shop id within the MetaFab ecosystem. 
     - parameter shopOfferId: (path) Any offer id for the shop. Zero, or a positive integer. 
     - returns: RequestBuilder<ShopOffer> 
     */
    open class func getShopOfferWithRequestBuilder(shopId: String, shopOfferId: String) -> RequestBuilder<ShopOffer> {
        var localVariablePath = "/v1/shops/{shopId}/items/{shopOfferId}"
        let shopIdPreEscape = "\(APIHelper.mapValueToPathItem(shopId))"
        let shopIdPostEscape = shopIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shopId}", with: shopIdPostEscape, options: .literal, range: nil)
        let shopOfferIdPreEscape = "\(APIHelper.mapValueToPathItem(shopOfferId))"
        let shopOfferIdPostEscape = shopOfferIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shopOfferId}", with: shopOfferIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ShopOffer>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get shop offers
     
     - parameter shopId: (path) Any shop id within the MetaFab ecosystem. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getShopOffers(shopId: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: [ShopOffer]?, _ error: Error?) -> Void)) -> RequestTask {
        return getShopOffersWithRequestBuilder(shopId: shopId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get shop offers
     - GET /v1/shops/{shopId}/offers
     - Returns all shop offers as an array of shop offer objects.
     - parameter shopId: (path) Any shop id within the MetaFab ecosystem. 
     - returns: RequestBuilder<[ShopOffer]> 
     */
    open class func getShopOffersWithRequestBuilder(shopId: String) -> RequestBuilder<[ShopOffer]> {
        var localVariablePath = "/v1/shops/{shopId}/offers"
        let shopIdPreEscape = "\(APIHelper.mapValueToPathItem(shopId))"
        let shopIdPostEscape = shopIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shopId}", with: shopIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ShopOffer]>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get shops
     
     - parameter xGameKey: (header) The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getShops(xGameKey: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: [GetShops200ResponseInner]?, _ error: Error?) -> Void)) -> RequestTask {
        return getShopsWithRequestBuilder(xGameKey: xGameKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get shops
     - GET /v1/shops
     - Returns an array of active shops for the game associated with the provided `X-Game-Key`.
     - parameter xGameKey: (header) The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. 
     - returns: RequestBuilder<[GetShops200ResponseInner]> 
     */
    open class func getShopsWithRequestBuilder(xGameKey: String) -> RequestBuilder<[GetShops200ResponseInner]> {
        let localVariablePath = "/v1/shops"
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Game-Key": xGameKey.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[GetShops200ResponseInner]>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Remove shop offer
     
     - parameter shopId: (path) Any shop id within the MetaFab ecosystem. 
     - parameter shopOfferId: (path) Any offer id for the shop. Zero, or a positive integer. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func removeShopOffer(shopId: String, shopOfferId: String, xAuthorization: String, xPassword: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: TransactionModel?, _ error: Error?) -> Void)) -> RequestTask {
        return removeShopOfferWithRequestBuilder(shopId: shopId, shopOfferId: shopOfferId, xAuthorization: xAuthorization, xPassword: xPassword).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove shop offer
     - DELETE /v1/shops/{shopId}/offers/{shopOfferId}
     - Removes the provided offer by offerId from the provided shop. Removed offers can no longer be used.
     - parameter shopId: (path) Any shop id within the MetaFab ecosystem. 
     - parameter shopOfferId: (path) Any offer id for the shop. Zero, or a positive integer. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - returns: RequestBuilder<TransactionModel> 
     */
    open class func removeShopOfferWithRequestBuilder(shopId: String, shopOfferId: String, xAuthorization: String, xPassword: String) -> RequestBuilder<TransactionModel> {
        var localVariablePath = "/v1/shops/{shopId}/offers/{shopOfferId}"
        let shopIdPreEscape = "\(APIHelper.mapValueToPathItem(shopId))"
        let shopIdPostEscape = shopIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shopId}", with: shopIdPostEscape, options: .literal, range: nil)
        let shopOfferIdPreEscape = "\(APIHelper.mapValueToPathItem(shopOfferId))"
        let shopOfferIdPostEscape = shopOfferIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shopOfferId}", with: shopOfferIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Password": xPassword.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionModel>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Set shop offer
     
     - parameter shopId: (path) Any shop id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter setShopOfferRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func setShopOffer(shopId: String, xAuthorization: String, xPassword: String, setShopOfferRequest: SetShopOfferRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: TransactionModel?, _ error: Error?) -> Void)) -> RequestTask {
        return setShopOfferWithRequestBuilder(shopId: shopId, xAuthorization: xAuthorization, xPassword: xPassword, setShopOfferRequest: setShopOfferRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set shop offer
     - POST /v1/shops/{shopId}/offers
     - Sets a new shop offer or updates an existing one for the provided id. Shop offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make a shop offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
     - parameter shopId: (path) Any shop id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter setShopOfferRequest: (body)  
     - returns: RequestBuilder<TransactionModel> 
     */
    open class func setShopOfferWithRequestBuilder(shopId: String, xAuthorization: String, xPassword: String, setShopOfferRequest: SetShopOfferRequest) -> RequestBuilder<TransactionModel> {
        var localVariablePath = "/v1/shops/{shopId}/offers"
        let shopIdPreEscape = "\(APIHelper.mapValueToPathItem(shopId))"
        let shopIdPostEscape = shopIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shopId}", with: shopIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setShopOfferRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Password": xPassword.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionModel>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Use shop offer
     
     - parameter shopId: (path) Any shop id within the MetaFab ecosystem. 
     - parameter shopOfferId: (path) Any offer id for the shop. Zero, or a positive integer. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. 
     - parameter xPassword: (header) The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func useShopOffer(shopId: String, shopOfferId: String, xAuthorization: String, xPassword: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: TransactionModel?, _ error: Error?) -> Void)) -> RequestTask {
        return useShopOfferWithRequestBuilder(shopId: shopId, shopOfferId: shopOfferId, xAuthorization: xAuthorization, xPassword: xPassword).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Use shop offer
     - POST /v1/shops/{shopId}/offers/{shopOfferId}/uses
     - Uses a shop offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
     - parameter shopId: (path) Any shop id within the MetaFab ecosystem. 
     - parameter shopOfferId: (path) Any offer id for the shop. Zero, or a positive integer. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. 
     - parameter xPassword: (header) The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. 
     - returns: RequestBuilder<TransactionModel> 
     */
    open class func useShopOfferWithRequestBuilder(shopId: String, shopOfferId: String, xAuthorization: String, xPassword: String) -> RequestBuilder<TransactionModel> {
        var localVariablePath = "/v1/shops/{shopId}/offers/{shopOfferId}/uses"
        let shopIdPreEscape = "\(APIHelper.mapValueToPathItem(shopId))"
        let shopIdPostEscape = shopIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shopId}", with: shopIdPostEscape, options: .literal, range: nil)
        let shopOfferIdPreEscape = "\(APIHelper.mapValueToPathItem(shopOfferId))"
        let shopOfferIdPostEscape = shopOfferIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shopOfferId}", with: shopOfferIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Password": xPassword.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionModel>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Withdraw from shop
     
     - parameter shopId: (path) Any shop id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter withdrawFromShopRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func withdrawFromShop(shopId: String, xAuthorization: String, xPassword: String, withdrawFromShopRequest: WithdrawFromShopRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: TransactionModel?, _ error: Error?) -> Void)) -> RequestTask {
        return withdrawFromShopWithRequestBuilder(shopId: shopId, xAuthorization: xAuthorization, xPassword: xPassword, withdrawFromShopRequest: withdrawFromShopRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Withdraw from shop
     - POST /v1/shops/{shopId}/withdrawals
     - Withdraws native token, currency or items from a shop. Whenever a shop offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the shop contract when the offer is used. These can be withdrawn to any other address.
     - parameter shopId: (path) Any shop id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter withdrawFromShopRequest: (body)  
     - returns: RequestBuilder<TransactionModel> 
     */
    open class func withdrawFromShopWithRequestBuilder(shopId: String, xAuthorization: String, xPassword: String, withdrawFromShopRequest: WithdrawFromShopRequest) -> RequestBuilder<TransactionModel> {
        var localVariablePath = "/v1/shops/{shopId}/withdrawals"
        let shopIdPreEscape = "\(APIHelper.mapValueToPathItem(shopId))"
        let shopIdPostEscape = shopIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{shopId}", with: shopIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: withdrawFromShopRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Password": xPassword.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionModel>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
