//
// LootboxesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class LootboxesAPI {

    /**
     Create lootbox manager
     
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xWalletDecryptKey: (header) The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter createLootboxManagerRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createLootboxManager(xAuthorization: String, xWalletDecryptKey: String, createLootboxManagerRequest: CreateLootboxManagerRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: CreateLootboxManager200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return createLootboxManagerWithRequestBuilder(xAuthorization: xAuthorization, xWalletDecryptKey: xWalletDecryptKey, createLootboxManagerRequest: createLootboxManagerRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create lootbox manager
     - POST /v1/lootboxManagers
     - Creates a new game lootbox manager and deploys a lootbox manager contract on behalf of the authenticating game's primary wallet. The deployed lootbox manager contract allows you to create lootbox behavior for existing items. For example, you can define item id(s) from one of your item collections as the requirement(s) to open a \"lootbox\". The required item(s) would be burned from the interacting player's wallet and the player would receive item(s) from a weighted randomized set of possible items the lootbox can contain.
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xWalletDecryptKey: (header) The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter createLootboxManagerRequest: (body)  
     - returns: RequestBuilder<CreateLootboxManager200Response> 
     */
    open class func createLootboxManagerWithRequestBuilder(xAuthorization: String, xWalletDecryptKey: String, createLootboxManagerRequest: CreateLootboxManagerRequest) -> RequestBuilder<CreateLootboxManager200Response> {
        let localVariablePath = "/v1/lootboxManagers"
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createLootboxManagerRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Wallet-Decrypt-Key": xWalletDecryptKey.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateLootboxManager200Response>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get lootbox manager lootbox
     
     - parameter lootboxManagerId: (path) Any lootbox manager id within the MetaFab platform. 
     - parameter lootboxManagerLootboxId: (path) Any lootbox manager lootbox id within the MetaFab platform. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLootboxManagerLootbox(lootboxManagerId: String, lootboxManagerLootboxId: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: LootboxManagerLootbox?, _ error: Error?) -> Void)) -> RequestTask {
        return getLootboxManagerLootboxWithRequestBuilder(lootboxManagerId: lootboxManagerId, lootboxManagerLootboxId: lootboxManagerLootboxId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get lootbox manager lootbox
     - GET /v1/lootboxManagers/{lootboxManagerId}/lootboxes/{lootboxManagerLootboxId}
     - Returns a lootbox manager lootbox object for the provided lootboxManagerLootboxId.
     - parameter lootboxManagerId: (path) Any lootbox manager id within the MetaFab platform. 
     - parameter lootboxManagerLootboxId: (path) Any lootbox manager lootbox id within the MetaFab platform. 
     - returns: RequestBuilder<LootboxManagerLootbox> 
     */
    open class func getLootboxManagerLootboxWithRequestBuilder(lootboxManagerId: String, lootboxManagerLootboxId: String) -> RequestBuilder<LootboxManagerLootbox> {
        var localVariablePath = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes/{lootboxManagerLootboxId}"
        let lootboxManagerIdPreEscape = "\(APIHelper.mapValueToPathItem(lootboxManagerId))"
        let lootboxManagerIdPostEscape = lootboxManagerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{lootboxManagerId}", with: lootboxManagerIdPostEscape, options: .literal, range: nil)
        let lootboxManagerLootboxIdPreEscape = "\(APIHelper.mapValueToPathItem(lootboxManagerLootboxId))"
        let lootboxManagerLootboxIdPostEscape = lootboxManagerLootboxIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{lootboxManagerLootboxId}", with: lootboxManagerLootboxIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<LootboxManagerLootbox>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get lootbox manager lootboxes
     
     - parameter lootboxManagerId: (path) Any lootbox manager id within the MetaFab platform. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLootboxManagerLootboxes(lootboxManagerId: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: [LootboxManagerLootbox]?, _ error: Error?) -> Void)) -> RequestTask {
        return getLootboxManagerLootboxesWithRequestBuilder(lootboxManagerId: lootboxManagerId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get lootbox manager lootboxes
     - GET /v1/lootboxManagers/{lootboxManagerId}/lootboxes
     - Returns all lootbox manager lootboxes as an array of lootbox objects.
     - parameter lootboxManagerId: (path) Any lootbox manager id within the MetaFab platform. 
     - returns: RequestBuilder<[LootboxManagerLootbox]> 
     */
    open class func getLootboxManagerLootboxesWithRequestBuilder(lootboxManagerId: String) -> RequestBuilder<[LootboxManagerLootbox]> {
        var localVariablePath = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes"
        let lootboxManagerIdPreEscape = "\(APIHelper.mapValueToPathItem(lootboxManagerId))"
        let lootboxManagerIdPostEscape = lootboxManagerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{lootboxManagerId}", with: lootboxManagerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[LootboxManagerLootbox]>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get lootbox managers
     
     - parameter xGameKey: (header) The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getLootboxManagers(xGameKey: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: [GetLootboxManagers200ResponseInner]?, _ error: Error?) -> Void)) -> RequestTask {
        return getLootboxManagersWithRequestBuilder(xGameKey: xGameKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get lootbox managers
     - GET /v1/lootboxManagers
     - Returns an array of active lootbox managers for the game associated with the provided `X-Game-Key`.
     - parameter xGameKey: (header) The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. 
     - returns: RequestBuilder<[GetLootboxManagers200ResponseInner]> 
     */
    open class func getLootboxManagersWithRequestBuilder(xGameKey: String) -> RequestBuilder<[GetLootboxManagers200ResponseInner]> {
        let localVariablePath = "/v1/lootboxManagers"
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Game-Key": xGameKey.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[GetLootboxManagers200ResponseInner]>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Open lootbox manager lootbox
     
     - parameter lootboxManagerId: (path) Any lootbox manager id within the MetaFab platform. 
     - parameter lootboxManagerLootboxId: (path) Any lootbox manager lootbox id within the MetaFab platform. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. 
     - parameter xWalletDecryptKey: (header) The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func openLootboxManagerLootbox(lootboxManagerId: String, lootboxManagerLootboxId: String, xAuthorization: String, xWalletDecryptKey: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: [TransactionModel]?, _ error: Error?) -> Void)) -> RequestTask {
        return openLootboxManagerLootboxWithRequestBuilder(lootboxManagerId: lootboxManagerId, lootboxManagerLootboxId: lootboxManagerLootboxId, xAuthorization: xAuthorization, xWalletDecryptKey: xWalletDecryptKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Open lootbox manager lootbox
     - POST /v1/lootboxManagers/{lootboxManagerId}/lootboxes/{lootboxManagerLootboxId}/opens
     - Opens a lootbox manager lootbox. The required input item(s) are burned from the wallet or player wallet opening the lootbox. The given output item(s) are given to the wallet or player wallet opening the lootbox.
     - parameter lootboxManagerId: (path) Any lootbox manager id within the MetaFab platform. 
     - parameter lootboxManagerLootboxId: (path) Any lootbox manager lootbox id within the MetaFab platform. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. 
     - parameter xWalletDecryptKey: (header) The &#x60;walletDecryptKey&#x60; of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. 
     - returns: RequestBuilder<[TransactionModel]> 
     */
    open class func openLootboxManagerLootboxWithRequestBuilder(lootboxManagerId: String, lootboxManagerLootboxId: String, xAuthorization: String, xWalletDecryptKey: String) -> RequestBuilder<[TransactionModel]> {
        var localVariablePath = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes/{lootboxManagerLootboxId}/opens"
        let lootboxManagerIdPreEscape = "\(APIHelper.mapValueToPathItem(lootboxManagerId))"
        let lootboxManagerIdPostEscape = lootboxManagerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{lootboxManagerId}", with: lootboxManagerIdPostEscape, options: .literal, range: nil)
        let lootboxManagerLootboxIdPreEscape = "\(APIHelper.mapValueToPathItem(lootboxManagerLootboxId))"
        let lootboxManagerLootboxIdPostEscape = lootboxManagerLootboxIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{lootboxManagerLootboxId}", with: lootboxManagerLootboxIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Wallet-Decrypt-Key": xWalletDecryptKey.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TransactionModel]>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Remove lootbox manager lootbox
     
     - parameter lootboxManagerId: (path) Any lootbox manager id within the MetaFab platform. 
     - parameter lootboxManagerLootboxId: (path) Any lootbox manager lootbox id within the MetaFab platform. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xWalletDecryptKey: (header) The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func removeLootboxManagerLootbox(lootboxManagerId: String, lootboxManagerLootboxId: String, xAuthorization: String, xWalletDecryptKey: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: TransactionModel?, _ error: Error?) -> Void)) -> RequestTask {
        return removeLootboxManagerLootboxWithRequestBuilder(lootboxManagerId: lootboxManagerId, lootboxManagerLootboxId: lootboxManagerLootboxId, xAuthorization: xAuthorization, xWalletDecryptKey: xWalletDecryptKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove lootbox manager lootbox
     - DELETE /v1/lootboxManagers/{lootboxManagerId}/lootboxes/{lootboxManagerLootboxId}
     - Removes the provided lootbox by lootboxId from the provided lootbox manager. Removed lootboxes can no longer be used.
     - parameter lootboxManagerId: (path) Any lootbox manager id within the MetaFab platform. 
     - parameter lootboxManagerLootboxId: (path) Any lootbox manager lootbox id within the MetaFab platform. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xWalletDecryptKey: (header) The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - returns: RequestBuilder<TransactionModel> 
     */
    open class func removeLootboxManagerLootboxWithRequestBuilder(lootboxManagerId: String, lootboxManagerLootboxId: String, xAuthorization: String, xWalletDecryptKey: String) -> RequestBuilder<TransactionModel> {
        var localVariablePath = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes/{lootboxManagerLootboxId}"
        let lootboxManagerIdPreEscape = "\(APIHelper.mapValueToPathItem(lootboxManagerId))"
        let lootboxManagerIdPostEscape = lootboxManagerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{lootboxManagerId}", with: lootboxManagerIdPostEscape, options: .literal, range: nil)
        let lootboxManagerLootboxIdPreEscape = "\(APIHelper.mapValueToPathItem(lootboxManagerLootboxId))"
        let lootboxManagerLootboxIdPostEscape = lootboxManagerLootboxIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{lootboxManagerLootboxId}", with: lootboxManagerLootboxIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Wallet-Decrypt-Key": xWalletDecryptKey.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionModel>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Set lootbox manager lootbox
     
     - parameter lootboxManagerId: (path) Any lootbox manager id within the MetaFab platform. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xWalletDecryptKey: (header) The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter setLootboxManagerLootboxRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func setLootboxManagerLootbox(lootboxManagerId: String, xAuthorization: String, xWalletDecryptKey: String, setLootboxManagerLootboxRequest: SetLootboxManagerLootboxRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: TransactionModel?, _ error: Error?) -> Void)) -> RequestTask {
        return setLootboxManagerLootboxWithRequestBuilder(lootboxManagerId: lootboxManagerId, xAuthorization: xAuthorization, xWalletDecryptKey: xWalletDecryptKey, setLootboxManagerLootboxRequest: setLootboxManagerLootboxRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set lootbox manager lootbox
     - POST /v1/lootboxManagers/{lootboxManagerId}/lootboxes
     - Sets a new lootbox manager lootbox or updates an existing one for the provided id. Lootboxes allow item(s) to be burned to receive a random set of possible item(s) based on probability weight.  Lootboxes can require any number of unique types of items and quantities to open a created lootbox type within the system. A common pattern with lootboxes is to create a lootbox item type within an item collection, and require it as the input item type.
     - parameter lootboxManagerId: (path) Any lootbox manager id within the MetaFab platform. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xWalletDecryptKey: (header) The &#x60;walletDecryptKey&#x60; of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter setLootboxManagerLootboxRequest: (body)  
     - returns: RequestBuilder<TransactionModel> 
     */
    open class func setLootboxManagerLootboxWithRequestBuilder(lootboxManagerId: String, xAuthorization: String, xWalletDecryptKey: String, setLootboxManagerLootboxRequest: SetLootboxManagerLootboxRequest) -> RequestBuilder<TransactionModel> {
        var localVariablePath = "/v1/lootboxManagers/{lootboxManagerId}/lootboxes"
        let lootboxManagerIdPreEscape = "\(APIHelper.mapValueToPathItem(lootboxManagerId))"
        let lootboxManagerIdPostEscape = lootboxManagerIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{lootboxManagerId}", with: lootboxManagerIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setLootboxManagerLootboxRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Wallet-Decrypt-Key": xWalletDecryptKey.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionModel>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
