//
// ExchangesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ExchangesAPI {

    /**
     Create exchange
     
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter createExchangeRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createExchange(xAuthorization: String, xPassword: String, createExchangeRequest: CreateExchangeRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: CreateExchange200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return createExchangeWithRequestBuilder(xAuthorization: xAuthorization, xPassword: xPassword, createExchangeRequest: createExchangeRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create exchange
     - POST /v1/exchanges
     - Creates a new game exchange and deploys a exchange contract on behalf of the authenticating game's primary wallet. The deployed exchange contract allows you to create fixed price rates for players to buy specific items from any item collection or ERC1155 contract. Additionally, an exchange allows you to create exchange offers for some set of item(s) to another set of item(s) or any mix of currency. Exchanges completely supports gasless player transactions.
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter createExchangeRequest: (body)  
     - returns: RequestBuilder<CreateExchange200Response> 
     */
    open class func createExchangeWithRequestBuilder(xAuthorization: String, xPassword: String, createExchangeRequest: CreateExchangeRequest) -> RequestBuilder<CreateExchange200Response> {
        let localVariablePath = "/v1/exchanges"
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createExchangeRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Password": xPassword.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateExchange200Response>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get exchange offer
     
     - parameter exchangeId: (path) Any exchange id within the MetaFab ecosystem. 
     - parameter exchangeOfferId: (path) Any offer id for the exchange. Zero, or a positive integer. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getExchangeOffer(exchangeId: String, exchangeOfferId: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: ExchangeOffer?, _ error: Error?) -> Void)) -> RequestTask {
        return getExchangeOfferWithRequestBuilder(exchangeId: exchangeId, exchangeOfferId: exchangeOfferId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get exchange offer
     - GET /v1/exchanges/{exchangeId}/items/{exchangeOfferId}
     - Returns a exchange offer object for the provided exchangeOfferId.
     - parameter exchangeId: (path) Any exchange id within the MetaFab ecosystem. 
     - parameter exchangeOfferId: (path) Any offer id for the exchange. Zero, or a positive integer. 
     - returns: RequestBuilder<ExchangeOffer> 
     */
    open class func getExchangeOfferWithRequestBuilder(exchangeId: String, exchangeOfferId: String) -> RequestBuilder<ExchangeOffer> {
        var localVariablePath = "/v1/exchanges/{exchangeId}/items/{exchangeOfferId}"
        let exchangeIdPreEscape = "\(APIHelper.mapValueToPathItem(exchangeId))"
        let exchangeIdPostEscape = exchangeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{exchangeId}", with: exchangeIdPostEscape, options: .literal, range: nil)
        let exchangeOfferIdPreEscape = "\(APIHelper.mapValueToPathItem(exchangeOfferId))"
        let exchangeOfferIdPostEscape = exchangeOfferIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{exchangeOfferId}", with: exchangeOfferIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExchangeOffer>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get exchange offers
     
     - parameter exchangeId: (path) Any exchange id within the MetaFab ecosystem. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getExchangeOffers(exchangeId: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: [ExchangeOffer]?, _ error: Error?) -> Void)) -> RequestTask {
        return getExchangeOffersWithRequestBuilder(exchangeId: exchangeId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get exchange offers
     - GET /v1/exchanges/{exchangeId}/offers
     - Returns all exchange offers as an array of exchange offer objects.
     - parameter exchangeId: (path) Any exchange id within the MetaFab ecosystem. 
     - returns: RequestBuilder<[ExchangeOffer]> 
     */
    open class func getExchangeOffersWithRequestBuilder(exchangeId: String) -> RequestBuilder<[ExchangeOffer]> {
        var localVariablePath = "/v1/exchanges/{exchangeId}/offers"
        let exchangeIdPreEscape = "\(APIHelper.mapValueToPathItem(exchangeId))"
        let exchangeIdPostEscape = exchangeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{exchangeId}", with: exchangeIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ExchangeOffer]>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get exchanges
     
     - parameter xGameKey: (header) The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getExchanges(xGameKey: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: [GetExchanges200ResponseInner]?, _ error: Error?) -> Void)) -> RequestTask {
        return getExchangesWithRequestBuilder(xGameKey: xGameKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get exchanges
     - GET /v1/exchanges
     - Returns an array of active exchanges for the game associated with the provided `X-Game-Key`.
     - parameter xGameKey: (header) The &#x60;publishedKey&#x60; of a specific game. This can be shared or included in game clients, websites, etc. 
     - returns: RequestBuilder<[GetExchanges200ResponseInner]> 
     */
    open class func getExchangesWithRequestBuilder(xGameKey: String) -> RequestBuilder<[GetExchanges200ResponseInner]> {
        let localVariablePath = "/v1/exchanges"
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Game-Key": xGameKey.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[GetExchanges200ResponseInner]>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Remove exchange offer
     
     - parameter exchangeId: (path) Any exchange id within the MetaFab ecosystem. 
     - parameter exchangeOfferId: (path) Any offer id for the exchange. Zero, or a positive integer. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func removeExchangeOffer(exchangeId: String, exchangeOfferId: String, xAuthorization: String, xPassword: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: TransactionModel?, _ error: Error?) -> Void)) -> RequestTask {
        return removeExchangeOfferWithRequestBuilder(exchangeId: exchangeId, exchangeOfferId: exchangeOfferId, xAuthorization: xAuthorization, xPassword: xPassword).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove exchange offer
     - DELETE /v1/exchanges/{exchangeId}/offers/{exchangeOfferId}
     - Removes the provided offerId from the provided exchange. Removed offers can no longer be used.
     - parameter exchangeId: (path) Any exchange id within the MetaFab ecosystem. 
     - parameter exchangeOfferId: (path) Any offer id for the exchange. Zero, or a positive integer. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - returns: RequestBuilder<TransactionModel> 
     */
    open class func removeExchangeOfferWithRequestBuilder(exchangeId: String, exchangeOfferId: String, xAuthorization: String, xPassword: String) -> RequestBuilder<TransactionModel> {
        var localVariablePath = "/v1/exchanges/{exchangeId}/offers/{exchangeOfferId}"
        let exchangeIdPreEscape = "\(APIHelper.mapValueToPathItem(exchangeId))"
        let exchangeIdPostEscape = exchangeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{exchangeId}", with: exchangeIdPostEscape, options: .literal, range: nil)
        let exchangeOfferIdPreEscape = "\(APIHelper.mapValueToPathItem(exchangeOfferId))"
        let exchangeOfferIdPostEscape = exchangeOfferIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{exchangeOfferId}", with: exchangeOfferIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Password": xPassword.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionModel>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Set exchange offer
     
     - parameter exchangeId: (path) Any exchange id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter setExchangeOfferRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func setExchangeOffer(exchangeId: String, xAuthorization: String, xPassword: String, setExchangeOfferRequest: SetExchangeOfferRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: TransactionModel?, _ error: Error?) -> Void)) -> RequestTask {
        return setExchangeOfferWithRequestBuilder(exchangeId: exchangeId, xAuthorization: xAuthorization, xPassword: xPassword, setExchangeOfferRequest: setExchangeOfferRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Set exchange offer
     - POST /v1/exchanges/{exchangeId}/offers
     - Sets a new exchange offer or updates an existing one for the provided id. Exchange offers allow currency to item, item to currency or item to item exchanges.  All request fields besides `id` are optional. Any optional fields omitted will not be used for the offer. This allows you to create many different combinations of offers. For example, you can create an offer that may require 3 unique item ids of specified quantities from a given item collection and gives the user 1 new unique item id in exchange.  Another example, you may want to make an exchange offer from one ERC20 token to another. This is also possible - simple set the input and output currency fields and leave the others blank.
     - parameter exchangeId: (path) Any exchange id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter setExchangeOfferRequest: (body)  
     - returns: RequestBuilder<TransactionModel> 
     */
    open class func setExchangeOfferWithRequestBuilder(exchangeId: String, xAuthorization: String, xPassword: String, setExchangeOfferRequest: SetExchangeOfferRequest) -> RequestBuilder<TransactionModel> {
        var localVariablePath = "/v1/exchanges/{exchangeId}/offers"
        let exchangeIdPreEscape = "\(APIHelper.mapValueToPathItem(exchangeId))"
        let exchangeIdPostEscape = exchangeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{exchangeId}", with: exchangeIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setExchangeOfferRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Password": xPassword.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionModel>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Use exchange offer
     
     - parameter exchangeId: (path) Any exchange id within the MetaFab ecosystem. 
     - parameter exchangeOfferId: (path) Any offer id for the exchange. Zero, or a positive integer. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. 
     - parameter xPassword: (header) The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func useExchangeOffer(exchangeId: String, exchangeOfferId: String, xAuthorization: String, xPassword: String, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: TransactionModel?, _ error: Error?) -> Void)) -> RequestTask {
        return useExchangeOfferWithRequestBuilder(exchangeId: exchangeId, exchangeOfferId: exchangeOfferId, xAuthorization: xAuthorization, xPassword: xPassword).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Use exchange offer
     - POST /v1/exchanges/{exchangeId}/offers/{exchangeOfferId}/uses
     - Uses an exchange offer. The required (input) item(s) and/or currency are removed from the wallet or player wallet using the offer. The given (output) item(s) and/or currency are given to the wallet or player wallet using the offer.
     - parameter exchangeId: (path) Any exchange id within the MetaFab ecosystem. 
     - parameter exchangeOfferId: (path) Any offer id for the exchange. Zero, or a positive integer. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of a specific game or the &#x60;accessToken&#x60; of a specific player. 
     - parameter xPassword: (header) The password of the authenticating game or player. Required to decrypt and perform blockchain transactions with the game or player primary wallet. 
     - returns: RequestBuilder<TransactionModel> 
     */
    open class func useExchangeOfferWithRequestBuilder(exchangeId: String, exchangeOfferId: String, xAuthorization: String, xPassword: String) -> RequestBuilder<TransactionModel> {
        var localVariablePath = "/v1/exchanges/{exchangeId}/offers/{exchangeOfferId}/uses"
        let exchangeIdPreEscape = "\(APIHelper.mapValueToPathItem(exchangeId))"
        let exchangeIdPostEscape = exchangeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{exchangeId}", with: exchangeIdPostEscape, options: .literal, range: nil)
        let exchangeOfferIdPreEscape = "\(APIHelper.mapValueToPathItem(exchangeOfferId))"
        let exchangeOfferIdPostEscape = exchangeOfferIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{exchangeOfferId}", with: exchangeOfferIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Password": xPassword.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionModel>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Withdraw from exchange
     
     - parameter exchangeId: (path) Any exchange id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter withdrawFromExchangeRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func withdrawFromExchange(exchangeId: String, xAuthorization: String, xPassword: String, withdrawFromExchangeRequest: WithdrawFromExchangeRequest, apiResponseQueue: DispatchQueue = MetaFabSwift5API.apiResponseQueue, completion: @escaping ((_ data: TransactionModel?, _ error: Error?) -> Void)) -> RequestTask {
        return withdrawFromExchangeWithRequestBuilder(exchangeId: exchangeId, xAuthorization: xAuthorization, xPassword: xPassword, withdrawFromExchangeRequest: withdrawFromExchangeRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Withdraw from exchange
     - POST /v1/exchanges/{exchangeId}/withdrawals
     - Withdraws native token, currency or items from a exchange. Whenever an exchange offer has input requirements, the native tokens, currencies or items for the requirements of that offer are deposited into the exchange contract when the offer is used. These can be withdrawn to any other address.
     - parameter exchangeId: (path) Any exchange id within the MetaFab ecosystem. 
     - parameter xAuthorization: (header) The &#x60;secretKey&#x60; of the authenticating game. 
     - parameter xPassword: (header) The password of the authenticating game. Required to decrypt and perform blockchain transactions with the game primary wallet. 
     - parameter withdrawFromExchangeRequest: (body)  
     - returns: RequestBuilder<TransactionModel> 
     */
    open class func withdrawFromExchangeWithRequestBuilder(exchangeId: String, xAuthorization: String, xPassword: String, withdrawFromExchangeRequest: WithdrawFromExchangeRequest) -> RequestBuilder<TransactionModel> {
        var localVariablePath = "/v1/exchanges/{exchangeId}/withdrawals"
        let exchangeIdPreEscape = "\(APIHelper.mapValueToPathItem(exchangeId))"
        let exchangeIdPostEscape = exchangeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{exchangeId}", with: exchangeIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = MetaFabSwift5API.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: withdrawFromExchangeRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "X-Authorization": xAuthorization.encodeToJSON(),
            "X-Password": xPassword.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TransactionModel>.Type = MetaFabSwift5API.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
