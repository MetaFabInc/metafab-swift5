//
// GetCurrencyFees200Response.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetCurrencyFees200Response: Codable, JSONEncodable, Hashable {

    /** The wallet address that fees from all applicable transactions are automatically sent to. */
    public var recipientAddress: String?
    /** The number of fee basis points. 100 basisPoints = 1% fee of the total transaction amount deducted from the total received by the recipient. */
    public var basisPoints: Double?
    /** The fixed number of currency as a fee regardless of the total transaction amount. 10 = 10 of the currency as a fee for any transaction, deducted from the total received by the recipient. */
    public var fixedAmount: Double?
    /** The maximum combined fee between basisPoints and fixedAmount. If the total transaction fee is over this amount, the capAmount will be used as the transaction fee deducted from the total received by the recipient. */
    public var capAmount: Double?

    public init(recipientAddress: String? = nil, basisPoints: Double? = nil, fixedAmount: Double? = nil, capAmount: Double? = nil) {
        self.recipientAddress = recipientAddress
        self.basisPoints = basisPoints
        self.fixedAmount = fixedAmount
        self.capAmount = capAmount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case recipientAddress
        case basisPoints
        case fixedAmount
        case capAmount
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(recipientAddress, forKey: .recipientAddress)
        try container.encodeIfPresent(basisPoints, forKey: .basisPoints)
        try container.encodeIfPresent(fixedAmount, forKey: .fixedAmount)
        try container.encodeIfPresent(capAmount, forKey: .capAmount)
    }
}

