//
// CreateCurrencyRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateCurrencyRequest: Codable, JSONEncodable, Hashable {

    public enum Chain: String, Codable, CaseIterable {
        case ethereum = "ETHEREUM"
        case goerli = "GOERLI"
        case matic = "MATIC"
        case mumbai = "MUMBAI"
    }
    /** The name of this currency. This can be anything, such as `Bright Gems`, `Gold`, etc. */
    public var name: String
    /** The shorthand symbol to represent this currency. This can be anything, such as `BGEM`, `GLD`, etc. */
    public var symbol: String
    /** The maximum amount of this currency that can ever exist. Use `0` if you do not want this currency to have a maximum supply. */
    public var supplyCap: Double
    /** The blockchain you want to deploy this currency on. Support for new blockchains are added over time. */
    public var chain: Chain

    public init(name: String, symbol: String, supplyCap: Double, chain: Chain) {
        self.name = name
        self.symbol = symbol
        self.supplyCap = supplyCap
        self.chain = chain
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case symbol
        case supplyCap
        case chain
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(symbol, forKey: .symbol)
        try container.encode(supplyCap, forKey: .supplyCap)
        try container.encode(chain, forKey: .chain)
    }
}

